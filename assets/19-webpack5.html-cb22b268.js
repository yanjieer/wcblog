import{_ as s,o as p,c as a,a as t}from"./app-9aee08a8.js";const n="/wcblog/assets/1689556596973.10af94c6-1c4c9330.png",o="/wcblog/assets/1701833264363-c3d3e516.png",c="/wcblog/assets/1701833298944-a0debf5c.png",e="/wcblog/assets/1689556927232.17b2b13f-a0b1800d.png",l="/wcblog/assets/1701833784790-9de3713f.png",i="/wcblog/assets/1701833894416-2e27fc00.png",r="/wcblog/assets/1701834049586-932ac798.png",g="/wcblog/assets/1701834309069-6848dfbe.png",b="/wcblog/assets/1701836820461-4e51777f.png",m="/wcblog/assets/1689557705508.98b21a4c-518c4730.png",d="/wcblog/assets/1689557750637.d9685a2b-7185f7f6.png",_="/wcblog/assets/1701837121672-2c61ee60.png",u="/wcblog/assets/1689557824501.f72d7654-0f95c68c.png",w="/wcblog/assets/1701837964250-19f8d804.png",k="/wcblog/assets/1701838376728-21a0571e.png",f="/wcblog/assets/1701854813280-54b9da3d.png",h="/wcblog/assets/1701855302841-e13c0558.png",v="/wcblog/assets/1701855768103-26fcbef8.png",q="/wcblog/assets/1689559049085.aaee38ed-cb3f3273.png",y="/wcblog/assets/1701860921353-89e47d8d.png",x="/wcblog/assets/1701861013714-6c4e0b31.png",j="/wcblog/assets/1701861194449-accb7e7b.png",S="/wcblog/assets/1701861172264-771d0a80.png",E="/wcblog/assets/1701861536240-d86ba4c7.png",P="/wcblog/assets/1701861733144-80630113.png",W="/wcblog/assets/1701862212806-bac16b96.png",A="/wcblog/assets/1701862313397-9a012623.png",B="/wcblog/assets/1689561199628.8d723e5f-8dfcbf05.png",D="/wcblog/assets/1689561310216.acbfa24f-23d4a796.png",V="/wcblog/assets/1701862784314-4351e899.png",C="/wcblog/assets/1701862971772-8833741e.png",J="/wcblog/assets/1701863087399-a3accf2e.png",K="/wcblog/assets/1701863192423-f9a2413b.png",L="/wcblog/assets/1701863267528-d29348b6.png",I="/wcblog/assets/1689561812664.b67ec35c-62139b95.png",M="/wcblog/assets/1701863672140-c55da1d4.png",z="/wcblog/assets/1701863696646-b126b960.png",H="/wcblog/assets/1701864159761-01993a0c.png",O="/wcblog/assets/1689562033766.bf2ee163-17191807.png",R="/wcblog/assets/1701864514638-b563448b.png",N="/wcblog/assets/1701864727936-01163ea0.png",T="/wcblog/assets/1701864709551-abbec642.png",X="/wcblog/assets/1701864759147-1dbf7e25.png",$="/wcblog/assets/1689562300799.5425854e-15246c05.png",F="/wcblog/assets/1701864833809-08e00e8b.png",G="/wcblog/assets/1701864927373-13f9a42d.png",Q="/wcblog/assets/1689562404094.48ce8204-5dce08c9.png",U="/wcblog/assets/1689643001203.37afa2ce-a308a08d.png",Y="/wcblog/assets/1689643200722.7245fd0d-7df5a70d.png",Z="/wcblog/assets/1689643227901.309234a0-71e9a834.png",ss="/wcblog/assets/1689643261254.97fd8c05-c4cfe305.png",ps="/wcblog/assets/1689643348518.a8eef85c-7d79b813.png",as="/wcblog/assets/1689643407786.e83631ec-8b8464bd.png",ts="/wcblog/assets/1701867783959-d450febe.png",ns="/wcblog/assets/1689643597965.56208cc2-92a41388.png",os="/wcblog/assets/1689643658290.4e1eb3d7-a02ccabd.png",cs="/wcblog/assets/1689643697497.f556ca75-c48b8f6d.png",es="/wcblog/assets/1689643849347.225a5939-6a41a211.png",ls="/wcblog/assets/1701868650564-bb7fdac3.png",is="/wcblog/assets/1701868839864-89a68775.png",rs="/wcblog/assets/1701868861262-d83c5bb3.png",gs="/wcblog/assets/1701869134049-ea1fcd40.png",bs="/wcblog/assets/1689644347748.53336c00-e5d75ffa.png",ms="/wcblog/assets/1689644369097.ad70d723-9edaf57f.png",ds="/wcblog/assets/1689644451027.67be8ed9-2033f6a3.png",_s="/wcblog/assets/1701869426323-ee02f143.png",us="/wcblog/assets/1701869405225-5ce5f3f9.png",ws="/wcblog/assets/1689644633596.ed25560a-52bd0e99.png",ks="/wcblog/assets/1701869592917-8a4fc65f.png",fs="/wcblog/assets/1701869637301-1956eeff.png",hs="/wcblog/assets/1689644775400.86d9d127-54e06921.png",vs="/wcblog/assets/1689644824511.c8a7119a-28a9527a.png",qs="/wcblog/assets/1701869963512-1b60d665.png",ys="/wcblog/assets/1689644922947.1bb84fd3-3b0a00a7.png",xs="/wcblog/assets/1689644982083.8efa3177-1701872105249-b6c4b163.png",js="/wcblog/assets/1689645005917.43e38f30-1701872105427-cd386b55.png",Ss="/wcblog/assets/1689645064929.18c8c948-0f86a7ff.png",Es="/wcblog/assets/1689645093280.6260d435-b53c1fce.png",Ps="/wcblog/assets/1689645131251.b071bd3d-3d54ce12.png",Ws="/wcblog/assets/1689645293243.59db0db6-cc37c437.png",As="/wcblog/assets/1689645371034.f5cd7af1-8c642fa9.png",Bs="/wcblog/assets/1689645402101.2801ec28-0bf5017a.png",Ds="/wcblog/assets/1689645480383.6a5fb61c-e4c903df.png",Vs="/wcblog/assets/1701872396477-3060e072.png",Cs="/wcblog/assets/1689645615270.d2bec4aa-047563ee.png",Js="/wcblog/assets/1701872630722-c3abf1e4.png",Ks="/wcblog/assets/1689646658033.797f8323-2844183d.png",Ls="/wcblog/assets/1689646766313.3a360ebc-ca6e4c50.png",Is="/wcblog/assets/1701873060717-afbcc6d1.png",Ms="/wcblog/assets/1701873027902-2c4cc629.png",zs="/wcblog/assets/1689646894351.57dd13b7-dcdf9ab4.png",Hs="/wcblog/assets/1689647093488.5bdd38a7-03a04cc3.png",Os="/wcblog/assets/1689647147264.bc26d171-b0542027.png",Rs="/wcblog/assets/1689647289197.35629618-8a96a3b1.png",Ns="/wcblog/assets/1689647329047.32308ca6-f3eafc73.png",Ts="/wcblog/assets/1689647369716.e43934da-1b2c4a62.png",Xs="/wcblog/assets/1689647484174.4955fe15-692592f5.png",$s="/wcblog/assets/1689647702545.a3699f71-26ea1777.png",Fs="/wcblog/assets/1689647809662.dc56c1fc-ee01b2ee.png",Gs="/wcblog/assets/1689648035852.8523e86a-ec8ea630.png",Qs="/wcblog/assets/1689648053585.6805ab72-bb1b6ea0.png",Us="/wcblog/assets/1689648221010.cb0a85e4-2d7585c5.png",Ys="/wcblog/assets/1689648260530.76a339f0-a762dcea.png",Zs="/wcblog/assets/1689648367001.1156c992-47468d82.png",sp="/wcblog/assets/1689648394157.928d5d09-25df8e71.png",pp="/wcblog/assets/1689648464154.d9b290a7-1ec52713.png",ap="/wcblog/assets/1689648551355.297d2891-0a7e41ca.png",tp="/wcblog/assets/1689648559959.fa8d17d3-900f488e.png",np="/wcblog/assets/1701875100361-c68fbd85.png",op="/wcblog/assets/1689649472221.9315c97c-4dc337e2.png",cp="/wcblog/assets/1689649493880.2443ad09-292babf2.png",ep="/wcblog/assets/1689649514499.356285f4-92fcfb72.png",lp="/wcblog/assets/1689649641123.b4facd27-6b8a9969.png",ip="/wcblog/assets/1689728999690.7ba2bafc-725d969d.png",rp="/wcblog/assets/1689649742395.3fd34873-c988b31d.png",gp="/wcblog/assets/1689649778428.84f64db7-ccef5a1a.png",bp="/wcblog/assets/1689649799274.e0cb12e7-91dbbf5e.png",mp="/wcblog/assets/1689649828057.e0516fc5-a759a9eb.png",dp="/wcblog/assets/1701909692506-27f21779.png",_p="/wcblog/assets/1689649907330.cf8fbd7e-75c3d2dc.png",up="/wcblog/assets/1701910057098-8dec8859.png",wp="/wcblog/assets/1701910090321-5063829c.png",kp="/wcblog/assets/1689729268836.270f435b-cc45237b.png",fp="/wcblog/assets/1701910922944-1c7b0a36.png",hp="/wcblog/assets/1689729522575.e2c27364-83c82213.png",vp="/wcblog/assets/1689729578879.f6c74e6c-ecd2da4f.png",qp="/wcblog/assets/1689729650422.23d1c5c6-7e3f06b8.png",yp="/wcblog/assets/1701911110636-5e88bf5a.png",xp="/wcblog/assets/1689729787402.e5cda33c-29fd9094.png",jp="/wcblog/assets/1701911255068-4ab9516f.png",Sp="/wcblog/assets/1689729932231.ce22d7c6-93ae13c7.png",Ep="/wcblog/assets/1689729972981.f566cca3-f22050f7.png",Pp="/wcblog/assets/1689730228879.e86ad984-5ba2c705.png",Wp="/wcblog/assets/1701913190930-71841eef.png",Ap="/wcblog/assets/1689730293539.1568131a-98438c6a.png",Bp="/wcblog/assets/1689730407483.b50d98c2-71c21070.png",Dp="/wcblog/assets/1701939711486-d4e4343e.png",Vp="/wcblog/assets/1701939728376-cbb6eb37.png",Cp="/wcblog/assets/1689730536110.9d57594f-86185823.png",Jp="/wcblog/assets/1701940011010-8048a9c4.png",Kp="/wcblog/assets/1701940646864-c8ae1214.png",Lp="/wcblog/assets/1689730905192.45fd1285-fa383da3.png",Ip="/wcblog/assets/1689731044763.ea9667e6-f2b6af29.png",Mp="/wcblog/assets/1701941078795-34a7493e.png",zp="/wcblog/assets/1701941260852-49338f41.png",Hp="/wcblog/assets/1689731271199.4ec64e82-04327893.png",Op="/wcblog/assets/1689731298201.0a3d2b7b-21d51931.png",Rp="/wcblog/assets/1689731298201.0a3d2b7b-21d51931.png",Np="/wcblog/assets/1701941981529-8e9300e2.png",Tp="/wcblog/assets/1689731442388.b03db763-1016c688.png",Xp="/wcblog/assets/1689731473009.1bddb4ef-4cca50bd.png",$p="/wcblog/assets/1689731624975.1bd93f2d-c653be15.png",Fp="/wcblog/assets/1701942505900-e2231409.png",Gp="/wcblog/assets/1701942541314-0886fff7.png",Qp="/wcblog/assets/1689731757131.fe03afe2-0285b383.png",Up="/wcblog/assets/1689731770316.bbcf7bfe-f664ba97.png",Yp="/wcblog/assets/1689731804162.b4859a52-bbda885b.png",Zp="/wcblog/assets/1689731925158.6ba89c02-390a5952.png",sa="/wcblog/assets/1701947360144-e9805c63.png",pa="/wcblog/assets/1701947242539-b6d15284.png",aa="/wcblog/assets/1701947478936-c304bd11.png",ta="/wcblog/assets/1701947535332-9c464b32.png",na="/wcblog/assets/1689732146952.75fc14de-1acdc65e.png",oa="/wcblog/assets/1701947653808-3add4c2b.png",ca="/wcblog/assets/1689732185572.ee39d4f0-c565e94e.png",ea="/wcblog/assets/1689732812471.0bb854c9-4cc59fb4.png",la="/wcblog/assets/1689732845642.75e59ee8-b571c285.png",ia="/wcblog/assets/1689732878916.439ccf75-bc1205e1.png",ra="/wcblog/assets/1689732904612.3c449436-63779b71.png",ga="/wcblog/assets/1689733027876.c1d734e3-f861ce99.png",ba="/wcblog/assets/1701948562777-eb403730.png",ma="/wcblog/assets/1701948510315-fa66eeed.png",da="/wcblog/assets/1701949379607-6241af9f.png",_a="/wcblog/assets/1689733198499.3b522f1d-1f40c270.png",ua="/wcblog/assets/1689733218277.4a47a1ef-1463c1b4.png",wa="/wcblog/assets/1689733252898.157b8694-3eca1fde.png",ka="/wcblog/assets/1689733328475.169d4129-092e4d6e.png",fa="/wcblog/assets/1701950316206-a073f49a.png",ha="/wcblog/assets/1701950431962-2a03b284.png",va="/wcblog/assets/1701950488287-910ec69a.png",qa="/wcblog/assets/1689733470881.5c284ede-745a36e0.png",ya="/wcblog/assets/1701950674238-25aa04f0.png",xa="/wcblog/assets/1689733560361.c5459f17-99e9bd29.png",ja="/wcblog/assets/1701951156982-ca0922f3.png",Sa="/wcblog/assets/1689733713278.8f3222d3-dbc7c087.png",Ea="/wcblog/assets/1701951925356-3bf80ba7.png",Pa="/wcblog/assets/1689733756881.cdaf3796-0a37c1a1.png",Wa="/wcblog/assets/1689733839892.06d66b12-75b416b4.png",Aa="/wcblog/assets/1701951925356-3bf80ba7.png",Ba="/wcblog/assets/1689733867914.c517c554-2a103feb.png",Da="/wcblog/assets/1689734301564.fd9d2c80-cdc6994a.png",Va="/wcblog/assets/1689734328003.aa060095-f4627371.png",Ca="/wcblog/assets/1689734361809.a4015178-64113895.png",Ja="/wcblog/assets/1689734560437.045f9fbd-c84c0151.png",Ka="/wcblog/assets/1701954230220-c331ec9e.png",La="/wcblog/assets/1701954324999-83bc2e79.png",Ia="/wcblog/assets/1689734731513.a28989ac-274d0340.png",Ma="/wcblog/assets/1689734780470.435f64c8-6208f604.png",za="/wcblog/assets/1689735089167.50b46e93-61fe9483.png",Ha="/wcblog/assets/1701955301471-674f4316.png",Oa="/wcblog/assets/1701955282538-8b43d557.png",Ra="/wcblog/assets/1689735216453.bd795f93-d0def42a.png",Na="/wcblog/assets/1701955518137-5f74f550.png",Ta="/wcblog/assets/1701955656624-6e586253.png",Xa="/wcblog/assets/1701955679014-b508b15c.png",$a="/wcblog/assets/1689735424706.68790773-4d1ec50b.png",Fa="/wcblog/assets/1689735441648.874f6170-d9171f94.png",Ga="/wcblog/assets/1701955823684-e3e30168.png",Qa="/wcblog/assets/1689735564378.61085ee1-78dc8758.png",Ua="/wcblog/assets/1689735588867.42d6393a-56c39fb8.png",Ya="/wcblog/assets/1701955992020-ffd2ad46.png",Za="/wcblog/assets/1701956062252-ff104764.png",st="/wcblog/assets/1689735672976.cf9d9746-12723c9d.png",pt="/wcblog/assets/1701956147938-d1be49dd.png",at="/wcblog/assets/1701956187909-b4404c67.png",tt="/wcblog/assets/1701956643880-36d673dd.png",nt="/wcblog/assets/1701956581936-24a4de9a.png",ot="/wcblog/assets/1689735892841.ee9ccb6f-be91594d.png",ct="/wcblog/assets/1689735912881.d3c65340-c291e7d1.png",et="/wcblog/assets/1701957500005-0c1aca8d.png",lt="/wcblog/assets/1701957478634-191ee617.png",it="/wcblog/assets/1689815250808.2902ef10-6a96df93.png",rt="/wcblog/assets/1689815375036.3c813a51-e2254ba8.png",gt="/wcblog/assets/1689815419162.8f5968b4-b1cc751f.png",bt="/wcblog/assets/1689815674420.24203008-ece60d46.png",mt="/wcblog/assets/1689815565372.5add0680-e1db4130.png",dt="/wcblog/assets/1701957867186-ebde69b6.png",_t="/wcblog/assets/1701957913010-7f7d06cd.png",ut="/wcblog/assets/1689815797347.42362f71-0202ad14.png",wt="/wcblog/assets/1701959292338-84a1bd08.png",kt="/wcblog/assets/1689815890056.d59a75bf-9f6e9563.png",ft="/wcblog/assets/1689815973469.e5029dbb-0149fedb.png",ht="/wcblog/assets/1689816034595.7c602724-120d9574.png",vt="/wcblog/assets/1689816434570.aff2bd4c-f7428f47.png",qt="/wcblog/assets/1689816484383.4d297b50-aed67b20.png",yt="/wcblog/assets/1689816512462.81c92747-e5741f4c.png",xt="/wcblog/assets/1689816530142.44944aca-549fa2e1.png",jt="/wcblog/assets/1689816561161.06cb390c-ff46ca58.png",St="/wcblog/assets/1689816601207.e9b01ab4-750673e0.png",Et="/wcblog/assets/1689816649727.f733ae48-b3eed35d.png",Pt="/wcblog/assets/1689816729919.f6d5826a-eeb6ca20.png",Wt="/wcblog/assets/1689816874223.7388548a-69c87897.png",At="/wcblog/assets/1689816907533.817656c9-b5d3149c.png",Bt="/wcblog/assets/1701959785583-ce8764b1.png",Dt="/wcblog/assets/1689817160431.64829876-37b3d801.png",Vt="/wcblog/assets/1689817186669.46a50822-d2540c36.png",Ct="/wcblog/assets/1689817211280.59b5214a-97bbdf8b.png",Jt="/wcblog/assets/1689817287311.a2a9595e-6251accb.png",Kt="/wcblog/assets/1689817345465.dc12ca46-fc1db809.png",Lt="/wcblog/assets/1689817405994.4573d297-43b445d3.png",It="/wcblog/assets/1689817446881.1e6f9a24-1bddd970.png",Mt="/wcblog/assets/1701961298132-7a3157fa.png",zt="/wcblog/assets/1701961257024-5edcc198.png",Ht="/wcblog/assets/1701918843078.7da7b970-3bc21701.png",Ot="/wcblog/assets/1701919955595.f1593507-2379d1ed.png",Rt={},Nt=t('<h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h1><h2 id="一-webpack5基础" tabindex="-1"><a class="header-anchor" href="#一-webpack5基础" aria-hidden="true">#</a> 一，webpack5基础</h2><h3 id="_1-认识webpack" tabindex="-1"><a class="header-anchor" href="#_1-认识webpack" aria-hidden="true">#</a> 1，认识webpack</h3><p>官网：https://webpack.js.org/</p><p><img src="'+n+'" alt="1689556596973"></p><p>之前写的项目，使用的vue-element-admin也是基于webpack的，之前通过vue-cli创建项目也是基于webpack的。今天需要自己去搭建环境，不使用官方提供的脚手架。</p><p><strong>总结：</strong></p><ul><li>webapck是一个构建工具，是基于node的，电脑上必须安装node，node版本需要大于16</li><li>打包是从入口开始，按照模块依赖进行打包，最终得到浏览器可以识别的静态资源</li><li>从某种程度来说，webpack代表的是一种架构能力</li></ul><h3 id="_2-搭建环境" tabindex="-1"><a class="header-anchor" href="#_2-搭建环境" aria-hidden="true">#</a> 2，搭建环境</h3><p>创建一个文件夹，如下：</p><p><img src="'+o+'" alt="1701833264363"></p><p>初始化一个配置文件，如下：</p><p><img src="'+c+'" alt="1701833298944"></p><p>安装本次学习所需要的依赖，如下：</p><p><img src="'+e+`" alt="1689556927232"></p><p>依赖如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-webpack&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@babel/core&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.22.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.18.6&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@babel/plugin-proposal-decorators&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.22.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@babel/preset-env&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.22.4&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@babel/preset-react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.22.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;babel-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^9.1.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;css-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.8.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.41.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslint-config-airbnb&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^19.0.4&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslint-plugin-import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.27.5&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslint-plugin-jsx-a11y&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.7.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslint-plugin-react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.32.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslint-plugin-react-hooks&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.6.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;eslint-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.0.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;file-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;html-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.5.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;mini-css-extract-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.7.6&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sass&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.62.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sass-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^13.3.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;style-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.3.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;url-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.1.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vue-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^15.8.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vue-style-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.1.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vue-template-compiler&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.7.14&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.84.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.1.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack-dev-server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.15.0&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^18.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;react-dom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^18.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.7.14&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vue-loader-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.3.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack-merge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.9.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装之，如下：</p><p><img src="`+l+'" alt="1701833784790"></p><p><strong>安装webpack，webpack-cli</strong></p><ul><li><p>webpack是核心包，提供了很多的API，插件。后面会用到这些API和插件。</p></li><li><p>webpack-cli提供了很多命令。</p></li></ul><p><strong>有两种安装方式：</strong></p><p>第一种，全局安装,(不推荐)，全局安装相当它把当成一个工具进行安装了，如下：</p><ul><li>cnpm i webpack -g （不需要操作）</li><li>cnpm i webpack-cli -g （不需要操作）</li></ul><p>第二种，在项目中安装（推荐，刚开始全局安装过了），如下：</p><ul><li>cnpm i webpack -D // -D表示开发依赖</li><li>cnpm i webpack-cli -D</li></ul><p>测试webpack是否安装成功，如下：</p><p><img src="'+i+'" alt="1701833894416"></p><p>学习webpack，就是学习一堆的配置，这些配置不需要记。官方说，要配置，需要在项目的根目录下面创建一个webpack.config.js文件，如下：</p><p><img src="'+r+'" alt="1701834049586"></p><p><img src="'+g+'" alt="1701834309069"></p><p>开始打包，如下：</p><p><img src="'+b+'" alt="1701836820461"></p><p>查看打包后的文件，如下：</p><p><img src="'+m+'" alt="1689557705508"></p><p>现在指定mode，如下：</p><p><img src="'+d+'" alt="1689557750637"></p><p>再次打包，如下：</p><p><img src="'+_+'" alt="1701837121672"></p><p>再次查看打包后的文件，如下：</p><p><img src="'+u+'" alt="1689557824501"></p><p>需要webpack.config.js文件名变了，打包时需要手动指定，如下：</p><p><img src="'+w+'" alt="1701837964250"></p><p><img src="'+k+'" alt="1701838376728"></p><p>还可以配置一个脚本，如下：</p><p><img src="'+f+`" alt="1701854813280"></p><p>运行脚本，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cnpm run build
npm run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要通过yarn，是不需要run，直接yarn build就OK。</p><h3 id="_3-入口和出口" tabindex="-1"><a class="header-anchor" href="#_3-入口和出口" aria-hidden="true">#</a> 3，入口和出口</h3><p><strong>入口的三种写法</strong>：</p><ul><li>相对路径</li><li>绝对路径</li><li>对象形式</li></ul><p>上面是第一种写法，使用的是相对路径，也可以使用绝对路径，如下：</p><p><img src="`+h+'" alt="1701855302841"></p><p>入口还可以写成对象的形式，如下：</p><p><img src="'+v+'" alt="1701855768103"></p><p>看一下vue打包后资源，如下：</p><p><img src="'+q+'" alt="1689559049085"></p><p>指定出口，如下：</p><p><img src="'+y+'" alt="1701860921353"></p><p>测试如下：</p><p><img src="'+x+'" alt="1701861013714"></p><p>修改出口路径为绝对路径，如下：</p><p><img src="'+j+'" alt="1701861194449"></p><p>测试如下：</p><p><img src="'+S+'" alt="1701861172264"></p><p>还可以在出口指定打包后的文件叫什么，有的地方叫build，我们叫dist，如下：</p><p><img src="'+E+'" alt="1701861536240"></p><p>将指定的出口命名为bundle，如下：</p><p><img src="'+P+'" alt="1701861733144"></p><p>filename可以指定一个格式化字符串，可以指定hash值，如下：</p><p><img src="'+W+'" alt="1701862212806"></p><p>说白了，输入的JS模块所依赖的源码发生了变化，打包时，hash值也会发生变化，用于解决浏览器缓存导致页面不刷新的问题。</p><p>还可以把打包后的JS文件放到js文件夹下面，如下：</p><p><img src="'+A+'" alt="1701862313397"></p><h3 id="_4-配置开发服务器" tabindex="-1"><a class="header-anchor" href="#_4-配置开发服务器" aria-hidden="true">#</a> 4，配置开发服务器</h3><p>前面打包打包到硬盘上。在开发时，需要配置一个开发服务器，这个开发服务器可以直接让我们在内存中打包，速度是远远高于硬盘的。之前用的脚手架，都是在内存中打包的。</p><p>安装一个开发服务器，叫webpack-dev-serve，如下：</p><p><img src="'+B+'" alt="1689561199628"></p><p>安装之，如下：</p><p><img src="'+D+'" alt="1689561310216"></p><p>配置之，如下 ：</p><p><img src="'+V+'" alt="1701862784314"></p><p>之前打包是使用webpack进行打包的，直接是在硬盘上的打包，现在我们需要使用内存打，如下：</p><p><img src="'+C+'" alt="1701862971772"></p><p>访问8081端口，如下：</p><p><img src="'+J+'" alt="1701863087399"></p><p>可以配置一个脚本，如下：</p><p><img src="'+K+'" alt="1701863192423"></p><p>执行脚本，如下：</p><p><img src="'+L+'" alt="1701863267528"></p><h3 id="_5-创建页面-把打包后的js插入页面" tabindex="-1"><a class="header-anchor" href="#_5-创建页面-把打包后的js插入页面" aria-hidden="true">#</a> 5，创建页面，把打包后的js插入页面</h3><p>创建一个页面，如下：</p><p><img src="'+I+'" alt="1689561812664"></p><p>在内存中打包，如下：</p><p><img src="'+M+'" alt="1701863672140"></p><p>访问之，如下：</p><p><img src="'+z+'" alt="1701863696646"></p><p>在内存是有打包后的js文件的，能不能把打包后的js插到上面的页面中呢？查看一下Vue，如下：</p><p><img src="'+H+'" alt="1701864159761"></p><p>结论，并没有把打包后的js文件，插入到页面中，那个我们就使用一个插件，叫html-webpack-plugin，如下：</p><p><img src="'+O+'" alt="1689562033766"></p><p>之前通过安装依赖（npm i）已经安装完了，直接使用之，如下：</p><p><img src="'+R+'" alt="1701864514638"></p><p>再次在内存中打包，如下：</p><p><img src="'+N+'" alt="1701864727936"></p><p>测试之，如下：</p><p><img src="'+T+'" alt="1701864709551"></p><p><img src="'+X+'" alt="1701864759147"></p><p><img src="'+$+'" alt="1689562300799"></p><p>在硬盘上打包试一下，如下：</p><p><img src="'+F+'" alt="1701864833809"></p><p><img src="'+G+'" alt="1701864927373"></p><p>再看一下vue脚手架，如下：</p><p><img src="'+Q+'" alt="1689562404094"></p><h3 id="_6-区分硬盘打包和内存打包" tabindex="-1"><a class="header-anchor" href="#_6-区分硬盘打包和内存打包" aria-hidden="true">#</a> 6，区分硬盘打包和内存打包</h3><p>打包分两种，一种是开发时的打包，一种方式生产时的打包。不同的打包方式是有不同的配置的，现在有两种打包方式，也就是说有两种部署，但是这两种配置有一些公共的配置，把这些配置区分出来，创建如下的文件，如下：</p><p><img src="'+U+'" alt="1689643001203"></p><p>先写一些公共的配置，如下：</p><p><img src="'+Y+'" alt="1689643200722"></p><p>开发配置，如下：</p><p><img src="'+Z+'" alt="1689643227901"></p><p>生产配置，如下：</p><p><img src="'+ss+'" alt="1689643261254"></p><p>在webpack.config.js中使用之，如下：</p><p><img src="'+ps+'" alt="1689643348518"></p><p>配置脚本，如下：</p><p><img src="'+as+'" alt="1689643407786"></p><p>在webpack.config.js中就可以得到env，如下：</p><p><img src="'+ts+'" alt="1701867783959"></p><p><img src="'+ns+'" alt="1689643597965"></p><p>简写如下：</p><p><img src="'+os+'" alt="1689643658290"></p><p>不能使用原生js合并，需要使用来合并，如下：</p><p><img src="'+cs+'" alt="1689643697497"></p><p>使用之，如下：</p><p><img src="'+es+'" alt="1689643849347"></p><p>测试之，如下：</p><p><img src="'+ls+'" alt="1701868650564"></p><p><img src="'+is+'" alt="1701868839864"></p><p><img src="'+rs+'" alt="1701868861262"></p><h3 id="_7-html-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#_7-html-webpack-plugin" aria-hidden="true">#</a> 7，html-webpack-plugin</h3><p>之前，在硬盘上打包，都会生成dist，下一次打包还会生成dist，但是之前dist下面的文件并不会自动删除，如果要想每一次打包都删除上次dist下面的文件，配置如下：</p><p><img src="'+gs+'" alt="1701869134049"></p><p>注意：如果源码没有变，打包后的app.xxxxxx.js也不会变，只有源码变了，才会生成新的文件。</p><p>webpack-html-plugin插件，看官网如下：</p><p><img src="'+bs+'" alt="1689644347748"></p><p>上面已经安装并使用了，如下：</p><p><img src="'+ms+'" alt="1689644369097"></p><p>上面配置了template，是用来指定页面的位置，可以使用绝对路径，如下：</p><p><img src="'+ds+'" alt="1689644451027"></p><p>默认它把打包后js插入到了head标签中，打包查看如下：</p><p><img src="'+_s+'" alt="1701869426323"></p><p><img src="'+us+'" alt="1701869405225"></p><p>配置把js文件插入到body结束标签之前，如下：</p><p><img src="'+ws+'" alt="1689644633596"></p><p><img src="'+ks+'" alt="1701869592917"></p><p>测试如下：</p><p><img src="'+fs+'" alt="1701869637301"></p><p>还可以做一些基本的配置，如下：</p><p><img src="'+hs+'" alt="1689644775400"></p><p>还需要在页面中title标签位置写如下代码：</p><p><img src="'+vs+'" alt="1689644824511"></p><p>重新打包，测试如下：</p><p><img src="'+qs+'" alt="1701869963512"></p><p>还可以配置一个小icon，制作一个icon，如下：</p><p><img src="'+ys+'" alt="1689644922947"></p><p><img src="'+xs+'" alt="1689644982083"></p><p><img src="'+js+'" alt="1689645005917"></p><p><img src="'+Ss+'" alt="1689645064929"></p><p><img src="'+Es+'" alt="1689645093280"></p><p><img src="'+Ps+'" alt="1689645131251"></p><p>重新打包，测试之，如下：</p><p><img src="'+Ws+'" alt="1689645293243"></p><h3 id="_8-progressplugin" tabindex="-1"><a class="header-anchor" href="#_8-progressplugin" aria-hidden="true">#</a> 8，ProgressPlugin</h3><p>Plugin是webpack内置的插件，如下：</p><p><img src="'+As+'" alt="1689645371034"></p><p><img src="'+Bs+'" alt="1689645402101"></p><p>使用之，如下：</p><p><img src="'+Ds+'" alt="1689645480383"></p><p>再次打包，如下：</p><p><img src="'+Vs+'" alt="1701872396477"></p><p>配置hander，如下：</p><p><img src="'+Cs+'" alt="1689645615270"></p><p>测试之，如下：</p><p><img src="'+Js+'" alt="1701872630722"></p><h3 id="_9-babel" tabindex="-1"><a class="header-anchor" href="#_9-babel" aria-hidden="true">#</a> 9，babel</h3><p>在入口中写一点ES6+的代码，如下：</p><p><img src="'+Ks+'" alt="1689646658033"></p><p><img src="'+Ls+'" alt="1689646766313"></p><p>打包，测试浏览器能不能识别，如下：</p><p><img src="'+Is+'" alt="1701873060717"></p><p><img src="'+Ms+'" alt="1701873027902"></p><p>发现，谷歌浏览器可以识别。但是有的浏览器是不认识的。再一个更新的语法，如下：</p><p><img src="'+zs+'" alt="1689646894351"></p><p><img src="'+Hs+'" alt="1689647093488"></p><p><img src="'+Os+'" alt="1689647147264"></p><p>也就是说，webapck对于ES6+中的一些语法，它也不能直接转化成ES5，不能转化成ES5，浏览器对ES5的兼容性是最好，我们需要使用loader，loader就是把webpack不能识别的模块，转化成webpack可以识别的模块。如下：</p><p><img src="'+Rs+'" alt="1689647289197"></p><p>JS模块中有高级语法，高级语法，如何转化成低级语法，让webpack识别呢？答：最最最最最厉害的就是babel。</p><p>要使用babel，就需要安装babel，如下：</p><p><img src="'+Ns+'" alt="1689647329047"></p><p><img src="'+Ts+'" alt="1689647369716"></p><p>安装之，如下：</p><p><img src="'+Xs+'" alt="1689647484174"></p><p>配置之，如下：</p><p><img src="'+$s+'" alt="1689647702545"></p><p>再次打包，如下：</p><p><img src="'+Fs+'" alt="1689647809662"></p><p>ES6中的语法，非常多，你要转化语法，需要安装对应插件，如你要把箭头函数转化成普通函数，那你就需要安装一个箭头函数转普通函数的插件，如你要把let转化成var，你需要安装一把let转成var的插件。也就说如果项目中用到了非常多的ES6语法，都需要转化，那就可以安装500个插件，babel给我们封装了很多预设，预设是插件集合，也就是集合中包含了很多的插件，如有一个预设，它可以把ES6中的大部分语法，转化成ES5，这个预设叫@babel/preset-env。预设并不是转化所有语法，仅仅是大部分的，个别语法转化不了，需要单独安装插件。我们先去安装 预设，如下：</p><p><img src="'+Gs+'" alt="1689648035852"></p><p><img src="'+Qs+'" alt="1689648053585"></p><p>然后需要配置，如下：</p><p><img src="'+Us+'" alt="1689648221010"></p><p>再次打包，如下：</p><p><img src="'+Ys+'" alt="1689648260530"></p><p>说明，你上面使用的预设不能打包装饰器，需要单独去安装对应的插件（打补丁），如下：</p><p><img src="'+Zs+'" alt="1689648367001"></p><p><img src="'+sp+'" alt="1689648394157"></p><p>安装之，如下：</p><p><img src="'+pp+'" alt="1689648464154"></p><p>配置之，如下：</p><p><img src="'+ap+'" alt="1689648551355"></p><p>再次打包，如下：</p><p><img src="'+tp+'" alt="1689648559959"></p><p>测试之，如下：</p><p><img src="'+np+'" alt="1701875100361"></p><p>后面我们需要学习一堆的loader，去转化不同的模块(使用loader来处理)。</p><ul><li>.js</li><li>.vue vue-loader</li><li>.jsx</li><li>.ts</li><li>.png</li><li>.less</li><li>.sass</li><li>.css</li><li>.json</li><li>.....</li></ul><p>后面我们也需要学习一堆的插件，插件是用来增强webpack</p><h3 id="_10-打包jsx模块" tabindex="-1"><a class="header-anchor" href="#_10-打包jsx模块" aria-hidden="true">#</a> 10，打包JSX模块</h3><p>react也是一个模块，如下：</p><p><img src="'+op+'" alt="1689649472221"></p><p>看一下版本，如下 ：</p><p><img src="'+cp+'" alt="1689649493880"></p><p>安装之，还需要安装一个react-dom模块，如下：</p><p><img src="'+ep+'" alt="1689649514499"></p><p>创建一个App.jsx组件，如下：</p><p><img src="'+lp+'" alt="1689649641123"></p><p>在main.js中引入，并渲染，如下：</p><p><img src="'+ip+'" alt="1689728999690"></p><p>打包main.js，main.js中引入了一个jsx模块，如下：</p><p><img src="'+rp+'" alt="1689649742395"></p><p>说明，webpack，默认情况下是不能处理jsx文件的，此时，就需要使用babel进行编译，说到babel就要想到预设和插件，此时，jsx就需要一个预设来处理，如下：</p><p><img src="'+gp+'" alt="1689649778428"></p><p>安装预设，如下：</p><p><img src="'+bp+'" alt="1689649799274"></p><p>配置之，如下：</p><p><img src="'+mp+'" alt="1689649828057"></p><p>再进行打包，如下：</p><p><img src="'+dp+'" alt="1701909692506"></p><p>还需要配置一个loder，如下：</p><p><img src="'+_p+'" alt="1689649907330"></p><p>再次打包，如下：</p><p><img src="'+up+'" alt="1701910057098"></p><p>测试之，如下：</p><p><img src="'+wp+'" alt="1701910090321"></p><p>到此，打包jsx（react中的组件）就OK了。还可以尝试打包一下vue文件，首先创建一个App.vue，尝试打包，100%打包不成功。因为webpack压根不认识.vue文件，所以需要安装对应的loader和预设，使用loader加载.vue文件，使用预设去翻译 vue代码。</p><h3 id="_11-配置source-map" tabindex="-1"><a class="header-anchor" href="#_11-配置source-map" aria-hidden="true">#</a> 11，配置source-map</h3><p>先看一个问题，代码如下：</p><p><img src="'+kp+'" alt="1689729268836"></p><p>看一下控制台，如下：</p><p><img src="'+fp+'" alt="1701910922944"></p><p>如果想让代码的报错位置正确，需要配置一个devtool，如下：</p><p><img src="'+hp+'" alt="1689729522575"></p><p><img src="'+vp+'" alt="1689729578879"></p><p>不同的配置代表的含义是不一样的。配置如下：</p><p><img src="'+qp+'" alt="1689729650422"></p><p>此时报错的位置和控制台中就保持一样的了，如下：</p><p><img src="'+yp+'" alt="1701911110636"></p><p>在生产中，可以不去配置source-map，上线的也是打包后的代码，可以不配置，也可以配置 ，如下：</p><p><img src="'+xp+'" alt="1689729787402"></p><p>在硬盘上打包，如下：</p><p><img src="'+jp+'" alt="1701911255068"></p><p><img src="'+Sp+'" alt="1689729932231"></p><p><img src="'+Ep+'" alt="1689729972981"></p><h3 id="_12-provideplugin" tabindex="-1"><a class="header-anchor" href="#_12-provideplugin" aria-hidden="true">#</a> 12，ProvidePlugin</h3><p>分析：</p><p><img src="'+Pp+'" alt="1689730228879"></p><p><img src="'+Wp+'" alt="1701913190930"></p><p>如何把某些包放到全局中，此时需要使用ProvidePlugin，如下：</p><p><img src="'+Ap+'" alt="1689730293539"></p><p>配置之，如下：</p><p><img src="'+Bp+'" alt="1689730407483"></p><p>动了配置文件，需要重新打包，再去访问之，如下：</p><p><img src="'+Dp+'" alt="1701939711486"></p><p><img src="'+Vp+'" alt="1701939728376"></p><p>打包时，不希望webpack去打包node_modle，配置如下：</p><p><img src="'+Cp+'" alt="1689730536110"></p><h3 id="_13-把第三方包抽离出来" tabindex="-1"><a class="header-anchor" href="#_13-把第三方包抽离出来" aria-hidden="true">#</a> 13，把第三方包抽离出来</h3><p>现在尝试去打包，如下：</p><p><img src="'+Jp+'" alt="1701940011010"></p><p>分析之，如下：</p><p><img src="'+Kp+'" alt="1701940646864"></p><p>查看之前打包的vue，生成的js文件，如下：</p><p><img src="'+Lp+'" alt="1689730905192"></p><p>现在需要把第三方模块抽离出来，如下：</p><p><img src="'+Ip+'" alt="1689731044763"></p><p>再次打包，如下：</p><p><img src="'+Mp+'" alt="1701941078795"></p><p>查看在dist文件夹生成的index.html问文件，如下：</p><p><img src="'+zp+'" alt="1701941260852"></p><h3 id="_14-打包css和sass" tabindex="-1"><a class="header-anchor" href="#_14-打包css和sass" aria-hidden="true">#</a> 14，打包css和sass</h3><p>书写样式，如下：</p><p><img src="'+Hp+'" alt="1689731271199"></p><p>在入口文件main.js中，引入scc文件，如下：</p><p><img src="'+Op+'" alt="1689731298201"></p><p><img src="'+Rp+'" alt="1689731298201"></p><p>不用想，webpack肯定不能加载css文件，肯定是需要一个loader进行加载的，测试如下：</p><p><img src="'+Np+'" alt="1701941981529"></p><p>此时，就需要安装对应的loader，如下：</p><p><img src="'+Tp+'" alt="1689731442388"></p><p>对css模块处理，需要安装两个laoder，如下：</p><p><img src="'+Xp+'" alt="1689731473009"></p><p>开始配置，如下：</p><p><img src="'+$p+'" alt="1689731624975"></p><p>再次打包，如下：</p><p><img src="'+Fp+'" alt="1701942505900"></p><p>查看浏览器控制台，如下：</p><p><img src="'+Gp+'" alt="1701942541314"></p><p>在生产打包时，需要把css抽离出来，此时我们需要用到一个插件，这个插件中带了一个loader，如下：</p><p><img src="'+Qp+'" alt="1689731757131"></p><p><img src="'+Up+'" alt="1689731770316"></p><p>安装之，如下：</p><p><img src="'+Yp+'" alt="1689731804162"></p><p>配置之，如下：</p><p><img src="'+Zp+'" alt="1689731925158"></p><p>打包之，如下：</p><p><img src="'+sa+'" alt="1701947360144"></p><p><img src="'+pa+'" alt="1701947242539"></p><p>在内存中打包，如下：</p><p><img src="'+aa+'" alt="1701947478936"></p><p>查看浏览器测试之，如下：</p><p><img src="'+ta+'" alt="1701947535332"></p><p>现在希望把打包后的样式放到css文件夹，并且加上hash值，解决缓存问题，如下：</p><p><img src="'+na+'" alt="1689732146952"></p><p>再次打包之，如下：</p><p><img src="'+oa+'" alt="1701947653808"></p><p>测试之，如下：</p><p><img src="'+ca+'" alt="1689732185572"></p><p>也就是说，在开发时，样式采用的是内部样式；在上线时，样式采用的是外部样式。</p><p>然后打包scss，创建scss文件，如下 ：</p><p><img src="'+ea+'" alt="1689732812471"></p><p>在入口main.js中，引入之，如下：</p><p><img src="'+la+'" alt="1689732845642"></p><p>尝试打包，如下：</p><p><img src="'+ia+'" alt="1689732878916"></p><p>此时，就需要使用sass-loader来加载编译scss代码，安装如下：</p><p><img src="'+ra+'" alt="1689732904612"></p><p>配置之，如下：</p><p><img src="'+ga+'" alt="1689733027876"></p><p>再次打包，如下：</p><p><img src="'+ba+'" alt="1701948562777"></p><p>看一下，是否可以处理scss代码，浏览器测试之，如下：</p><p><img src="'+ma+'" alt="1701948510315"></p><p>同理，如果是less也是一样的，需要使用less-loader来处理。</p><h3 id="_15-打包图片" tabindex="-1"><a class="header-anchor" href="#_15-打包图片" aria-hidden="true">#</a> 15，打包图片</h3><p>在webpack眼中，一切都是模块，图片当然也是模块。准备一张图片，如下：</p><p><img src="'+da+'" alt="1701949379607"></p><p>在App组件中，使用图片，如下：</p><p><img src="'+_a+'" alt="1689733198499"></p><p>测试之，如下：</p><p><img src="'+ua+'" alt="1689733218277"></p><p>在webpack4中，有两个laoder可以处理，在wabpack5中这两个laoder就淘汰了，这两个laoder如下：</p><ul><li>url-loader</li><li>file-loader</li></ul><p>简单演示一下如何使用，安装之，如下：</p><p><img src="'+wa+'" alt="1689733252898"></p><p>配置之，如下：</p><p><img src="'+ka+'" alt="1689733328475"></p><p>测试之，如下：</p><p><img src="'+fa+'" alt="1701950316206"></p><p>在硬盘上打包，如下：</p><p><img src="'+ha+'" alt="1701950431962"></p><p>生成的文件，如下：</p><p><img src="'+va+'" alt="1701950488287"></p><p>使用url-loader再测试一下，url-loader比file-loader更强大，如下 ：</p><p><img src="'+qa+'" alt="1689733470881"></p><p>打包如下：</p><p><img src="'+ya+'" alt="1701950674238"></p><p><img src="'+xa+'" alt="1689733560361"></p><p>在内存上测试，如下：</p><p><img src="'+ja+`" alt="1701951156982"></p><p>当然，url-loader也可以配置，配置成是事要打包成字符串。参考代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token punctuation">{</span>
     <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|svg|gif|jpeg|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
     <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
         <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
             <span class="token comment">// limit单位是字节    1个字节 = 8位</span>
             <span class="token comment">//                  1KB = 1024个字节</span>
             <span class="token comment">//                  1MB = 1024KB</span>
             <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token comment">// 如果图片小于50kb，打包字符串，如果图片大于50kb，打包成图片</span>
             <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;img/[name].[hash:8].[ext]&#39;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">]</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在webpack5中上面的两个laoder就淘汰了，对于图片的处理，webpack都内置好了，如下：</p><p><img src="`+Sa+'" alt="1689733713278"></p><p>打包之，如下 ：</p><p><img src="'+Ea+'" alt="1701951925356"></p><p><img src="'+Pa+'" alt="1689733756881"></p><p>可以进一步优化，如下：</p><p><img src="'+Wa+'" alt="1689733839892"></p><p>再次打包，如下：</p><p><img src="'+Aa+'" alt="1701951930730"></p><p><img src="'+Ba+'" alt="1689733867914"></p><h3 id="_16-eslint" tabindex="-1"><a class="header-anchor" href="#_16-eslint" aria-hidden="true">#</a> 16，ESLint</h3><p>eslint是用来进行代码检测。也非常重要，在很多公司，都是要求使用eslint的，如果代码写的不符合要求，有可能代码就提交到不到仓库。在很早之前，有一个laoder，叫eslint-loader来校验代码，现在这个laoder已经淘汰了。现在使用的是一个插件，如下：</p><p><img src="'+Da+'" alt="1689734301564"></p><p>安装之，如下:</p><p><img src="'+Va+'" alt="1689734328003"></p><p>还需要安装eslint，eslint里面包含了很多的校验规则，安装如下：</p><p><img src="'+Ca+'" alt="1689734361809"></p><p>这个插件不能进行校验，这个插件是把eslint集成到webpack中的。代码校验是在开发时进行校验的，配置就需要配置到开发环境中，如下：</p><p><img src="'+Ja+'" alt="1689734560437"></p><p>尝试打包一下，如下 ：</p><p><img src="'+Ka+'" alt="1701954230220"></p><p>在浏览器中看效果如下：</p><p><img src="'+La+'" alt="1701954324999"></p><p>上面的插件仅仅是把eslint集成到webpack中，对于eslint的配置文件，还需要单独配置，打开eslint的官网，如下：</p><p><img src="'+Ia+'" alt="1689734731513"></p><p><img src="'+Ma+'" alt="1689734780470"></p><p>创建eslint的配置文件，有多种方式，创建一个eslint的配置文件, 如下：</p><p><img src="'+za+'" alt="1689735089167"></p><p>只要动了配置文件，都需要重启开发服务器，如下：</p><p><strong><img src="'+Ha+'" alt="1701955301471"></strong></p><p>测试如下：</p><p><img src="'+Oa+'" alt="1701955282538"></p><p>尝试添加一些规则，如下：</p><p><img src="'+Ra+'" alt="1689735216453"></p><p>看浏览器，如下：</p><p><img src="'+Na+'" alt="1701955518137"></p><p>修改之如下：</p><p><img src="'+Ta+'" alt="1701955656624"></p><p>再次测试之，如下：</p><p><img src="'+Xa+'" alt="1701955679014"></p><p>再次测试之，如下：</p><p><img src="'+$a+'" alt="1689735424706"></p><p>现在尝试不加分号，如下：</p><p><img src="'+Fa+'" alt="1689735441648"></p><p>动了配置文件，需要重启服务器，测试如下 ：</p><p><img src="'+Ga+'" alt="1701955823684"></p><p>eslint中都有哪些规则呢？如下：</p><p>https://blog.csdn.net/qq_51657072/article/details/124427270</p><p>再尝试使用一个，如下：</p><p><img src="'+Qa+'" alt="1689735564378"></p><p>现在，在代码中就写一个console，如下：</p><p><img src="'+Ua+'" alt="1689735588867"></p><p>重启服务器，测试如下：</p><p><img src="'+Ya+'" alt="1701955992020"></p><p><img src="'+Za+'" alt="1701956062252"></p><p>修改之，如下：</p><p><img src="'+st+'" alt="1689735672976"></p><p>测试之，如下：</p><p><img src="'+pt+'" alt="1701956147938"></p><p>还需要知道，在控制台中也会给出提示，如下：</p><p><img src="'+at+'" alt="1701956187909"></p><p>可以关闭规则，如下：</p><p><img src="'+tt+'" alt="1701956643880"></p><p>如果是警告提示，不弹出警告框，测试如下：</p><p><img src="'+nt+'" alt="1701956581936"></p><p>配置如下：</p><p><img src="'+ot+'" alt="1689735892841"></p><p>规则如下 ：</p><p><img src="'+ct+'" alt="1689735912881"></p><p>重新启动服务器，测试如下：</p><p><img src="'+et+'" alt="1701957500005"></p><p><img src="'+lt+'" alt="1701957478634"></p><p>对于react代码中的jsx的校验，eslint规则并不完善，有一个公司，推出一个校验包，叫eslint-config-arbnb，如下：</p><p><img src="'+it+'" alt="1689815250808"></p><p>直接下载eslint-config-airbnb不好下载，需要把它内置的其它都下载下来，如下：</p><p><img src="'+rt+'" alt="1689815375036"></p><p>安装之，如下：</p><p><img src="'+gt+'" alt="1689815419162"></p><p>集成airbnb对react代码的检测，如下：</p><p><img src="'+bt+'" alt="1689815674420"></p><p>使用React写一个计数器，如下：</p><p><img src="'+mt+'" alt="1689815565372"></p><p>此时，再打包，会报大量的错误，如下：</p><p><img src="'+dt+'" alt="1701957867186"></p><p><img src="'+_t+'" alt="1701957913010"></p><p>如果不想让eslint检测我们的src下面所有的代码，可以创建一个.eslintignore的配置文件，如下：</p><p><img src="'+ut+'" alt="1689815797347"></p><p><img src="'+wt+'" alt="1701959292338"></p><p>在eslint中提供了一些注释，可以忽略对某一行或某一片代码的查检，如下：</p><p><img src="'+kt+'" alt="1689815890056"></p><p><img src="'+ft+'" alt="1689815973469"></p><p>遇到了错误，怎么办？</p><p><img src="'+ht+'" alt="1689816034595"></p><p><strong>总结解决eslint报错的方式：</strong></p><ol><li>创建一个eslint的配置文件，修改rules，rules是自定义规则。</li><li>使用eslint注释，非常多，临时地忽略检测</li><li>在项目的根目录下面创建一个.eslintignore的文件，里面写src/*，可以忽略对src下面的所有的文件的检测</li><li>老老实实找到错误的位置，把代码写规范了，前提是需要熟悉公司中使用了哪些规则</li></ol><p>对于ES6中新的语法检测，还有一个包，叫@babel/eslint-parser。需要安装：</p><p><img src="'+vt+'" alt="1689816434570"></p><p>配置如下：</p><p><img src="'+qt+'" alt="1689816484383"></p><h3 id="_17-使用vue脚手架中的eslint" tabindex="-1"><a class="header-anchor" href="#_17-使用vue脚手架中的eslint" aria-hidden="true">#</a> 17，使用vue脚手架中的eslint</h3><p>创建vue脚手架创建项目，如下：</p><p><img src="'+yt+'" alt="1689816512462"></p><p><img src="'+xt+'" alt="1689816530142"></p><p><img src="'+jt+'" alt="1689816561161"></p><p><img src="'+St+'" alt="1689816601207"></p><p><img src="'+Et+'" alt="1689816649727"></p><p>弹出vue脚手架中webpack的配置，如下：</p><p><img src="'+Pt+'" alt="1689816729919"></p><h3 id="_18-配置路径相关" tabindex="-1"><a class="header-anchor" href="#_18-配置路径相关" aria-hidden="true">#</a> 18，配置路径相关</h3><p>配置如下：</p><p><img src="'+Wt+'" alt="1689816874223"></p><p>使用之，如下：</p><p><img src="'+At+'" alt="1689816907533"></p><p>效果如下：</p><p><img src="'+Bt+'" alt="1701959785583"></p><h3 id="_19-搭建vue的开发环境" tabindex="-1"><a class="header-anchor" href="#_19-搭建vue的开发环境" aria-hidden="true">#</a> 19，搭建Vue的开发环境</h3><p>参考地址：https://blog.csdn.net/qq_40412456/article/details/122334286</p><p>创建App.vue组件，如下： <img src="'+Dt+'" alt="1689817160431"></p><p>在main.js中引入Vue，渲染Vue组件，如下：</p><p><img src="'+Vt+'" alt="1689817186669"></p><p>尝试打包，如下：</p><p><img src="'+Ct+'" alt="1689817211280"></p><p>安装依赖：</p><p><img src="'+Jt+'" alt="1689817287311"></p><p>这些依赖之前都安装好，如下：</p><p><img src="'+Kt+'" alt="1689817345465"></p><p>配置如下：</p><p><img src="'+Lt+'" alt="1689817405994"></p><p><img src="'+It+'" alt="1689817446881"></p><p>尝试打包，如下：</p><p><img src="'+Mt+'" alt="1701961298132"></p><p><img src="'+zt+'" alt="1701961257024"></p><h3 id="_20-打包less" tabindex="-1"><a class="header-anchor" href="#_20-打包less" aria-hidden="true">#</a> 20，打包less</h3><h3 id="_21-打包字体图标" tabindex="-1"><a class="header-anchor" href="#_21-打包字体图标" aria-hidden="true">#</a> 21，打包字体图标</h3><h2 id="二-总结" tabindex="-1"><a class="header-anchor" href="#二-总结" aria-hidden="true">#</a> 二，总结</h2><h3 id="_1-打包主流程" tabindex="-1"><a class="header-anchor" href="#_1-打包主流程" aria-hidden="true">#</a> 1，打包主流程</h3><p>Webpack的打包过程非常复杂，但大致上可简化为：</p><p><img src="'+Ht+'" alt="1701918843078"></p><p><strong>流程：</strong></p><ul><li>webpack首先需要根据输入配置（<code>entry/content</code>）找到项目入口文件；之后根据按模块处理（<code>module/resolve/external</code>等）所配置的规则逐一处理模块文件，处理过程包括转译、依赖分析等；模块处理完毕后，最后再根据处理相关配置项（<code>optimization/target</code>等）合并模块资源、注入运行时依赖、优化产物结构等。</li></ul><p><strong>输入：</strong></p><ul><li>从文件系统中读入代码文件；</li></ul><p><strong>模块递归处理：</strong></p><ul><li>调用Loder转译Module内容，并将结果转化为AST，从中分析出模块依赖关系，进一步调用模块处理过程，直到所有依赖文件都处理完毕；</li></ul><p><strong>后处理：</strong></p><ul><li>所有模块递归处理完毕后开始执行后处理，包括模块合并、注入运行时、产物优化等，最终输出Chunk集合；</li></ul><p><strong>输出：</strong></p><ul><li>将Chunk写出到外部文件系统；</li></ul><h3 id="_2-配置分类" tabindex="-1"><a class="header-anchor" href="#_2-配置分类" aria-hidden="true">#</a> 2，配置分类</h3><p>从上述打包流程角度，<strong>Webpack配置项大体上可分为两类</strong>：</p><ul><li>流程类：作用于打包流程某个或若干个环节，直接影响编译打包效果的配置项</li><li>工具类：打包主流程之外，提供更工程化工具的配置项</li></ul><h3 id="_3-主流程类配置" tabindex="-1"><a class="header-anchor" href="#_3-主流程类配置" aria-hidden="true">#</a> 3，主流程类配置</h3><p><strong>流程类的配置：</strong></p><ul><li>输入输出 <ul><li><code>entry</code>: 用于定义项目入口文件，Webpack 会从这些入口文件开始按图索骥找出所有项目文件；</li><li><code>output</code>: 配置产物输出路径、名称等；</li><li><code>content</code>: 项目执行上下文路径；</li></ul></li><li>模块处理 <ul><li><code>resolve</code>: 用于配置模块路径解析规则，可用于帮助 Webpack 更精确、高效地找到指定模块；</li><li><code>module</code>: 用于配置模块加载规则，例如针对什么类型的资源需要使用哪些 Loader 进行处理；</li><li><code>externals</code>: 用于声明外部资源，Webpack 会直接忽略这部分资源，跳过这些资源的解析、打包操作；</li></ul></li><li>后处理 <ul><li><code>mode</code>: 编译模式短语，支持 <code>development</code>、<code>production</code> 等值，可以理解为一种声明环境的短语；</li><li><code>target</code>: 用于配置编译产物的目标运行环境，支持 web、node、electron 等值，不同值最终产物会有所差异；</li><li><code>optimization</code>: 用于控制如何优化产物包体积，内置 Dead Code Elimination、Scope Hoisting、代码混淆、代码压缩等功能；</li></ul></li></ul><h3 id="_4-工具类配置" tabindex="-1"><a class="header-anchor" href="#_4-工具类配置" aria-hidden="true">#</a> 4，工具类配置</h3><p><strong>工具类的配置</strong>（除了核心的打包功能之外，Webpack还提供了一些列用于提升研发效率的工具）<strong>：</strong></p><ul><li><code>devServer</code>: 用于配置与 HMR 强相关的开发服务器功能；</li><li><code>devtool</code>: 用于配置产物 Sourcemap 生成规则；</li><li><code>watch</code>: 用于配置持续监听文件变化，持续构建；</li></ul><p><strong>性能优化的配置：</strong></p><ul><li><code>cache</code>: Webpack 5 之后，该项用于控制如何缓存编译过程信息与编译结果；</li><li><code>performance</code>: 用于配置当产物大小超过阈值时，如何通知开发者；</li></ul><p><strong>日志类的配置：</strong></p><ul><li><code>stats</code>：用于精确地控制编译过程的日志内容，在做比较细致的性能调试时非常有用</li><li><code>infrastructureLogging</code>：用于控制日志输出方式，例如可以通过该配置将日志输出到磁盘文件</li></ul><p><img src="'+Ot+'" alt="1701919955595"></p><p>Webpack 提供了上百项复杂配置，但大体上都可以归类为流程类配置或工具类配置，对于流程类配置应该多关注它们对编译主流程的影响；而工具类则更加内聚，基本上一种配置项解决一种工程化问题。</p>',547),Tt=[Nt];function Xt($t,Ft){return p(),a("div",null,Tt)}const Qt=s(Rt,[["render",Xt],["__file","19-webpack5.html.vue"]]);export{Qt as default};
