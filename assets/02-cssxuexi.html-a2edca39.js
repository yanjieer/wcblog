import{_ as a,r as n,o as r,c as o,b as l,d as i,e as t,a as e}from"./app-29c3f653.js";const p="/wcblog/assets/1692757752624.4c7722db-8f9ba189.png",c="/wcblog/assets/1692757964557.c6d26139-68d66d54.png",d="/wcblog/assets/1692761101126.c195193d-380cc690.png",h="/wcblog/assets/1692774726365.61cde9fd-1596e90c.png",g="/wcblog/assets/1692774954288.b9a074f3-3da81376.png",u="/wcblog/assets/1692775391950.028bfb68-1693103865368-6d2156a0.png",b="/wcblog/assets/1692775963795.187916ed-434dbdbc.png",m="/wcblog/assets/1692776384746.419974c2-b9b0a850.png",f="/wcblog/assets/1692776678392.3a8259d5-17b77052.png",_="/wcblog/assets/1692776784011.4a34539c-57328981.png",x="/wcblog/assets/1692844447535.8fb5d062-6c9cf181.png",w="/wcblog/assets/1692844495563.ecc06f4f-64239c38.png",v="/wcblog/assets/1692860034796.cda5ce08-2871543f.png",k="/wcblog/assets/1692860391559.3e6a8214-86cf42e5.png",y="/wcblog/assets/1692860996568.af278278-1693140142094-b73177ab.png",S="/wcblog/assets/1692861422881.a2f6b042-1693140594573-eb838d0b.png",C="/wcblog/assets/1692862010561.6faf2288-047cb11e.png",z="/wcblog/assets/1692862259079.28b8fb3b-576631d7.png",j="/wcblog/assets/1692863664422.8203e711-559e2cbf.png",B="/wcblog/assets/1692863821180.dc0aa524-40f1a16b.png",L="/wcblog/assets/1692864288189.a364bc2d-c66b1bf4.png",G="/wcblog/assets/1692926017405.a90ccbda-2330a239.png",M="/wcblog/assets/1692926610496.9c628aff-3d235db9.png",N="/wcblog/assets/1692927645941.39af054a-ea7e1112.png",T="/wcblog/assets/1692929189385.38db42e7-15bc1d28.png",V="/wcblog/assets/1692929339573.9c514fbf-e20dcfe3.png",E="/wcblog/assets/1692930180886.ae7df417-3f762f84.png",F="/wcblog/assets/1693185610817.8a9a5662-c37e6163.png",H="/wcblog/assets/1693185693636.e0ca3f73-81c1f5b2.png",R="/wcblog/assets/1693186163769.8cf9b46e-5f1980cf.png",I="/wcblog/assets/1693186273880.b4b94ea8-8f336700.png",J="/wcblog/assets/1693188810189.b69fe530-82aaf80a.png",O="/wcblog/assets/1693188866296.b4b3e90d-3a41aa1f.png",P="/wcblog/assets/1693188916442.e583bb30-6d5d7c72.png",U="/wcblog/assets/1693188981544.9ad63826-41530f3a.png",X="/wcblog/assets/1693189035799.8fb77a7e-5ae90685.png",Y="/wcblog/assets/1693189462574.8bf3d76e-8ea8e96c.png",$="/wcblog/assets/1692946870280.549a4af3-1693527614487-b016f2bc.png",q="/wcblog/assets/1692947018299.f4dcfa80-1693527660700-a7ad9d08.png",A="/wcblog/assets/1692947420770.a0622dfe-1693527745999-f8a7063f.png",D="/wcblog/assets/1692947756322.3d9e5d43-1693527781366-0d7a7dc7.png",K="/wcblog/assets/1692948611758.c5e955e1-1693527839805-4c2d8e58.png",Q="/wcblog/assets/1692948698993.4783794e-6b2a2940.png",W="/wcblog/assets/1692949146743.891c96fd-5bb5b666.png",Z="/wcblog/assets/1692950647262.397846d7-169b5d69.png",ll="/wcblog/assets/1692950804303.49fa8d81-54b8e190.png",il="/wcblog/assets/1693358890294.ceb8aebb-0feba394.png",sl="/wcblog/assets/1693358955046.b186915e-32946a26.png",tl="/wcblog/assets/1693359026088.d1445414-2c0585cb.png",el="/wcblog/assets/1693359190479.e4701828-8d9ee18c.png",al="/wcblog/assets/1693360558045.08c63dc6-611ab3bd.png",nl="/wcblog/assets/1693362355814.5be01bfa-07f8f588.png",rl={},ol=e('<h1 id="css学习" tabindex="-1"><a class="header-anchor" href="#css学习" aria-hidden="true">#</a> CSS学习</h1><h2 id="第一节-css的三种写法" tabindex="-1"><a class="header-anchor" href="#第一节-css的三种写法" aria-hidden="true">#</a> 第一节 CSS的三种写法</h2><h3 id="_1-初识css" tabindex="-1"><a class="header-anchor" href="#_1-初识css" aria-hidden="true">#</a> 1.初识CSS</h3><ul><li>CSS表示层叠样式表（Cascading Style Sheet，简称：CSS，又称为又称串样式列表、级联样式表、串接样式表、阶层式样式表）是为网页添加样式的代码。CSS并不是一门编程语言，是样式语言。作用就是进行网页布局和美化网页。</li><li>常见属性</li></ul><p><img src="'+p+'" alt="1692757752624"></p><ul><li>每一条属性分属性名和属性值</li></ul><p><img src="'+c+`" alt="1692757964557"></p><ul><li>学习CSS就是去学习一堆的属性和选择器</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token punctuation">{</span><span class="token punctuation">}</span>
      叫声明块 <span class="token property">在声明块中放一个个的属性，属性的格式是：xxx</span><span class="token punctuation">:</span>yyyy<span class="token punctuation">;</span>

      <span class="token selector">每一个属性是以分号结束 属性名也叫键，属性值也叫值。整体也叫键值对。 选择器</span> <span class="token punctuation">{</span>
          <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
          <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
          <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
          <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
          ...
      <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-三种写法" tabindex="-1"><a class="header-anchor" href="#_2-三种写法" aria-hidden="true">#</a> 2.三种写法</h3><ul><li>内部式：CSS 写在style标签中, 提示：style标签虽然可以写在页面任意位置，但是通常约定写在 head 标签中</li><li>外部式：CSS 写在一个单独的.css文件中, 提示：需要通过link标签在网页中引入</li><li>行内式：CSS 写在标签的style属性中, 提示：之后会配合js使用</li><li>学习时，使用内部样式；项目时，使用外部样式；对于行内样式，偶尔也会使用</li></ul><p><strong>行内样式</strong></p><ul><li>行内样式表存在于HTML元素的style属性之中</li><li>CSS样式之间用分号;隔开，建议每条CSS样式后面都加上分号</li></ul><p><strong>内部样式</strong></p><ul><li>将CSS放在HTML文件 head元素 里的 style元素 之中</li></ul><p><strong>外部样式</strong></p><ul><li>将css编写一个独立的文件中，并且通过元素引入进来</li><li>link元素的作用</li><li>可以在style元素或者CSS文件中使用@import导入其他文件</li></ul><h2 id="第二节-css选择器" tabindex="-1"><a class="header-anchor" href="#第二节-css选择器" aria-hidden="true">#</a> 第二节 CSS选择器</h2><ul><li>选择器大概可以归为这几类：</li></ul><p>​ 1.通用选择器（universalselector）</p><p>​ 2.元素选择器(type selectors)</p><p>​ 3.类选择器(class selectors)</p><p>​ 4.id选择器(id selectors)</p><p>​ 5.属性选择器(attribute selectors)</p><p>​ 6.组合选择器(combinators)</p><p>​ 7.伪类选择器(pseudo-class)</p><p>​ 8.伪元素选择器（pseudo-elements）</p><ul><li>在开发中，class选择器用的是最多的，尽可能使用class选择器；如果页面上某个区域是唯一的，也可以使用id选择器；任何标签都可以通过id或class起名字；id只能选一个元素，class选择器可以选多个元素；不要使用标签名充当id名<div id="div">xxx</div>div&gt;</li></ul><h3 id="_1-基础选择器" tabindex="-1"><a class="header-anchor" href="#_1-基础选择器" aria-hidden="true">#</a> 1.基础选择器</h3><p><strong>通用选择器（universal selector）</strong></p><ul><li>结构：* { css属性名：属性值； }</li><li>所有的元素都会被选中</li><li>一般用来给所有元素作一些通用性的设置，比如内边距、外边距，比如重置一些内容</li><li>效率比较低，尽量不要使用</li></ul><p><strong>简单选择器</strong></p><ul><li>简单选择器是开发中用的最多的选择器</li><li>元素选择器（type selectors）, 使用元素的名称</li><li>类选择器（class selectors）, 使用 . 类名</li><li>id选择器（id selectors）, 使用 #id</li></ul><p><img src="`+d+'" alt="1692761101126"></p><p><strong>元素选择器(type selectors)</strong></p><ul><li>结构：标签名 { css属性名：属性值； }</li><li>作用：通过标签名，找到页面中所有这类标签，设置样式</li><li>标签选择器选择的是一类标签，而不是单独某一个</li><li>标签选择器无论嵌套关系有多深，都能找到对应的标签</li></ul><p><strong>类选择器(class selectors)</strong></p><ul><li>结构：.类名 { css属性名：属性值； }</li><li>作用：通过类名，找到页面中所有带有这个类名的标签，设置样式</li><li>类名可以由数字、字母、下划线、中划线组成，但不能以数字或者中划线开头</li><li>一个标签可以同时有多个类名，类名之间以空格隔开</li><li>类名可以重复，一个类选择器可以同时选中多个标签</li></ul><p><strong>id选择器(id selectors)</strong></p><ul><li>结构：#id属性值 { css属性名：属性值； }</li><li>作用：通过id属性值，找到页面中带有这个id属性值的标签，设置样式</li><li>所有标签上都有id属性</li><li>id属性值类似于身份证号码，在一个页面中是唯一的，不可重复的</li><li>一个标签上只能有一个id属性值</li><li>一个id选择器只能选中一个标签</li></ul><p><strong>class选择器和id选择器有什么区别：</strong></p><ul><li>他俩都是给标签起名字，class起名字可以重复，id不能重复</li><li>class起名字通过 .名字 选中；id起名字通过 #名字 选中</li><li>开发中class用的最多</li><li>后面学完js也会使用id选择器完成页面的交互</li></ul><h3 id="_2-高级选s择器" tabindex="-1"><a class="header-anchor" href="#_2-高级选s择器" aria-hidden="true">#</a> 2.高级选s择器</h3><p>1.属性选择器(attribute selectors)</p><p>2.组合选择器(combinators)</p><p>3.伪类选择器(pseudo-class)</p><p>4.伪元素选择器（pseudo-elements）</p><p><strong>属性选择器(attribute selectors)</strong></p><ul><li>拥有某一个属性 [att]</li><li>属性等于某个值 [att=val]</li><li>[attr*=val]: 属性值包含某一个值val （了解）</li><li>[attr^=val]: 属性值以val开头 （了解）</li><li>[attr$=val]: 属性值以val结尾 （了解）</li><li>[attr|=val]: 属性值等于val或者以val开头后面紧跟连接符 （了解）</li><li>[attr~=val]: 属性值包含val, 如果有其他值必须以空格和val分割 （了解）</li></ul><p><strong>后代选择器（descendant combinator）</strong></p><ul><li>后代选择器一: 所有的后代(直接/间接的后代)，选择器之间以<strong>空格</strong>分割</li><li>后代选择器二: 直接子代选择器(必须是直接子代)，选择器之间以 <strong>&gt;</strong> 分割</li></ul><p><strong>兄弟选择器(sibling combinator)</strong>：</p><ul><li>兄弟选择器一:相邻兄弟选择器， 使用符号 <strong>+</strong> 连接</li><li>兄弟选择器二: 普遍兄弟选择器， 使用符号 <strong>~</strong> 连接</li></ul><p><strong>交集选择器</strong></p><ul><li>交集选择器: 需要同时符合两个选择器条件(两个选择器紧密连接)</li><li>在开发中通常为了精准的选择某一个元素</li></ul><p><img src="'+h+'" alt="1692774726365"></p><p><strong>并集选择器</strong></p><ul><li>并集选择器: 符合一个选择器条件即可(两个选择器以,号分割)</li><li>在开发中通常为了给多个元素设置相同的样式;</li></ul><p><img src="'+g+'" alt="1692774954288"></p><p><strong>动态伪类选择器（dynamic pseudo-classes）</strong></p><ul><li>a:hover 鼠标挪动到链接上(重要)</li><li>除了a元素，:hover也能用在其他元素素</li><li>选中鼠标悬停在元素上的状态，设置样式</li><li>伪类选择器选中的元素的某种状态</li></ul><p><img src="'+u+'" alt="1692775391950"></p><h2 id="第三节-字体和文字相关的属性" tabindex="-1"><a class="header-anchor" href="#第三节-字体和文字相关的属性" aria-hidden="true">#</a> 第三节 字体和文字相关的属性</h2><h3 id="_1-css颜色表示法" tabindex="-1"><a class="header-anchor" href="#_1-css颜色表示法" aria-hidden="true">#</a> 1.CSS颜色表示法</h3><p><strong>有两种颜色表示法</strong></p><ul><li><p>RGB表示法：</p><p>RGB是一种色彩空间，通过R（red，红色）、G（green，绿色）、B（blue，蓝色）三原色来组成了不同的颜色，通过调整这三个颜色不同的比例，就可以组合成其它的颜色。</p><p>rgb函数 或 rgba函数 rgb(0, 0, 0) rgb(255, 255, 255) rgb(255, 0, 0) rgba(255, 0, 0, 0.5)</p></li><li><p>进制表示法：</p><p>16进制表示 以#打头 #000000 #ffffff #ff0000 #f00 #0f0 #00f</p></li></ul><p><img src="'+b+'" alt="1692775963795"></p><h3 id="_2-chrome浏览器开发者工具-掌握" tabindex="-1"><a class="header-anchor" href="#_2-chrome浏览器开发者工具-掌握" aria-hidden="true">#</a> 2.<strong>Chrome浏览器开发者工具(掌握)</strong></h3><ol><li>打开Chrome调试工具，方式一：右键 – 检查，方式二：快捷键 – F12</li><li>快捷键：ctrl+ 可以调整页面或者调试工具的字体大小</li><li>可以通过删除某些元素来查看网页结构</li><li>可以通过增删css来调试网页样式-</li></ol><p><img src="'+m+'" alt="1692776384746"></p><p><img src="'+f+'" alt="1692776678392"></p><p><img src="'+_+'" alt="1692776784011"></p><h3 id="_3-字体相关的样式" tabindex="-1"><a class="header-anchor" href="#_3-字体相关的样式" aria-hidden="true">#</a> 3.字体相关的样式</h3><p><strong>1. font-size</strong></p><ul><li>font-size决定文字的大小，具有继承性</li><li>font-size：具体数值+单位（单位需要设置，否则无效）</li><li>谷歌浏览器默认文字大小是16px</li><li>常用的设置：百分比，基于父元素的font-size计算，比如50%表示等于父元素font-size的一半</li></ul><p><strong>2.font-family</strong></p><ul><li>font-family用于设置文字的字体名称，其具有继承性</li><li>可以设置一个或多个字体名称</li><li>浏览器会选择列表中第一个该计算机上有安装的字体</li><li>渲染规则：从左往右按照顺序查找，如果电脑中未安装该字体，则显示下一个字体，如果都不支持，此时会根据操作系统，显示最后字体系列的默认字体</li><li>如果字体名称中存在多个单词，需要使用引号包起来</li><li>window上默认字体是微雅黑，macOs上默认字体是苹方</li><li>程序员决定不了，使用什么样的字体，由设计师决定</li></ul><p><strong>3.font-weight</strong></p><ul><li>font-weight用于设置文字的粗细（重量）</li><li>常见的取值：normal（正常，等于400）；bold（加粗，等于700；strong、b、h1~h6等标签的font-weight默认就是bold）</li><li>100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 ：每一个数字表示一个重量</li><li>不是所有字体都提供了九种粗细，因此部分取值页面中无变化</li><li>实际开发中以：正常、加粗两种取值使用最多</li></ul><p><strong>4.font-style</strong></p><ul><li>font-style用于设置文字的常规（normal）、斜体（italic)显示，也具有继承性</li><li>em、i、cite、address、var、dfn等元素的font-style默认就是italic</li></ul><p><strong>5.font-variant</strong></p><ul><li>font-variant可以影响小写字母的显示形式，variant是变形的意思;</li><li>normal：常规显示，small-caps：将小写字母替换为缩小过的大写字母</li></ul><p><strong>6.line-height</strong></p><ul><li>line-height用于设置文本的行高(行高可以先简单理解为一行文字所占据的高度)</li><li>形式： line-height：数字+px</li><li>网页精准布局时，会设置 line-height : 1 可以取消上下间距</li><li>取值：倍数（当前标签font-size的倍数）</li><li>行高的严格定义是：两行文字基线（baseline）之间的间距</li><li>基线（baseline）：与小写字母x最底部对齐的线</li></ul><p><img src="'+x+'" alt="1692844447535"></p><p><img src="'+w+'" alt="1692844495563"></p><p><strong>height和line-height的区别</strong>：</p><ul><li>height：元素的整体高度（盒子的高度）</li><li>line-height：元素中每一行文字所占据的高度</li><li>应用实例：假设div中只有一行文字，如何让这行文字在div内部垂直居中？答：让line-height等同于height</li></ul><p><strong>7.font</strong></p><ul><li>font是一个缩写属性</li><li>font 属性可以用来作为 font-style, font-variant, font-weight, font-size, line-height 和 font-family 属性的简写</li><li>font-style、font-variant、font-weight可以随意调换顺序，也可以省略</li><li>line-height可以省略，如果不省略，必须跟在font-size后面</li><li>font-size、font-family不可以调换顺序，不可以省略</li></ul><h3 id="_4-文本相关的样式" tabindex="-1"><a class="header-anchor" href="#_4-文本相关的样式" aria-hidden="true">#</a> 4.文本相关的样式</h3><p><strong>1.text-decoration</strong></p><ul><li>text-decoration用于设置文字的装饰线</li><li>decoration取值：none，无任何装饰线，可以去除a元素默认的下划线</li><li>decoration取值：underline，下划线</li><li>decoration取值：overline，上划线</li><li>decoration取值：line-through，中划线（删除线）</li><li>a元素有下划线的本质是被添加了text-decoration属性</li><li>开发中会使用 text-decoration : none ; 清除a标签默认的下划线</li></ul><p><strong>2.text-transform</strong></p><ul><li>text-transform用于设置文字的大小写转换</li><li>text-transform取值：capitalize(使首字母大写, 资本化的意思)将每个单词的首字符变为大写</li><li>text-transform取值：uppercase(大写字母)将每个单词的所有字符变为大写</li><li>text-transform取值：lowercase(小写字母)将每个单词的所有字符变为小写</li><li>text-transform取值：none：没有任何影响</li></ul><p><strong>3.text-indent</strong></p><ul><li>text-indent用于设置第一行内容的缩进</li><li>形式： text-indent：数字+px</li><li>取值：数字+em（推荐：1em = 当前标签的font-size的大小）</li><li>text-indent: 2em; 刚好是缩进2个文字</li></ul><p><strong>4.text-align</strong></p><ul><li>text-align: 直接翻译过来设置文本的对齐方式</li><li>如果需要让文本水平居中，text-align属性给文本所在标签（文本的父元素）设置</li><li>left 左对齐；right 右对齐；正中间显示；两端对齐</li><li><strong>text-align : center 能让哪些元素水平居中？</strong></li></ul><p>​ 1.文本、</p><p>​ 2.span标签、a标签</p><p>​ 3.input标签、img标签</p><p>​ 4.这个属性有继承性</p><p><strong>5.letter-spacing、word-spacing</strong></p><ul><li>letter-spacing、word-spacing分别用于设置字母、单词之间的间距</li><li>默认是0，可以设置为负数</li></ul><h3 id="_5-css继承性" tabindex="-1"><a class="header-anchor" href="#_5-css继承性" aria-hidden="true">#</a> 5.CSS继承性</h3><ul><li>如果一个属性具备继承性, 那么在该元素上设置后, 它的后代元素都可以继承这个属性</li><li>如果后代元素自己有设置该属性, 那么优先使用后代元素自己的属性(不管继承过来的属性权重多高)</li><li>常见的font-size/font-family/font-weight/line-height/color/text-align都具有继承性</li><li>可以通过调试工具判断样式是否可以继承</li></ul><p><img src="'+v+'" alt="1692860034796"></p><ul><li>对于a标签的继承性</li></ul><p><img src="'+k+'" alt="1692860391559"></p><ul><li>对于其他标签是可以继承的</li><li>有些属性是不能继承的，但是可以强制继承</li></ul><p><img src="'+y+'" alt="1692860996568"></p><ul><li><p><strong>继承失效的特殊情况</strong></p><p>1.a标签的color会继承失效，其实color属性继承下来了，但是被浏览器默认设置的样式给覆盖掉了</p><p>2.h系列标签的font-size会继承失效， 其实font-size属性继承下来了，但是被浏览器默认设置的样式给覆盖掉了</p><p>3.其他元素有浏览器默认样式，此时继承性依然存在，但是优先显示浏览器的默认样式</p></li></ul><h3 id="_6-css层叠性" tabindex="-1"><a class="header-anchor" href="#_6-css层叠性" aria-hidden="true">#</a> 6.CSS层叠性</h3><ul><li>给同一个标签设置不同的样式 → 此时样式会层叠叠加 → 会共同作用在标签上</li></ul><p><img src="'+S+'" alt="1692861422881"></p><ul><li>给同一个标签设置相同的样式 → 此时样式会层叠覆盖 → 最终写在最后的样式会生效</li><li>优先级的高低：继承 &lt; 通配符 &lt; 标签选择器 &lt; 类选择器 &lt; 行内样式 &lt; !import</li><li>利用important可以强制改变优先级</li></ul><p><img src="'+C+'" alt="1692862010561"></p><p>对于后代选择器，需要考虑权重值</p><p><img src="'+z+'" alt="1692862259079"></p><p>后面写项目时，如果效果和你想的不一样，需要考虑继承性和层叠性。你要检查你是不是对同一个元素通过没的选择器，设置了相同的样式。</p><h3 id="_7-元素的类型" tabindex="-1"><a class="header-anchor" href="#_7-元素的类型" aria-hidden="true">#</a> 7.元素的类型</h3><ul><li>块级元素（block-level elements）: 独占父元素的一行 男标签</li><li>行内级元素（inline-level elements）:多个行内级元素可以在父元素的同一行中显示 女标签</li><li>行内块级元素（inline-level elements）:多个行内级元素可以在父元素的同一行中显示 人妖标签</li></ul><p><strong>块级元素</strong></p><p>1.独占一行，可以设置宽高</p><p>2.宽度默认是父元素的100%，高度默认由内容撑开</p><p>3.标签：div、p、h1~h6、ul、li、dl、dt、dd、form、header、nav、footer……</p><p><img src="'+j+'" alt="1692863664422"></p><p><strong>行内元素</strong></p><p>1.一行并排显示多个元素</p><p>2.宽度和高度默认由内容撑开</p><p>3.不可以设置宽高</p><p>4.标签：a、span 、b、u、i、s、strong、ins、em、del……</p><p><img src="'+B+'" alt="1692863821180"></p><p><strong>行内块元素</strong></p><p>1.除了一行可以并排显示多个元素外，其他和男标签一样</p><p>2.可以设置宽高</p><p>3.特殊情况：img标签有行内块元素特点，但是Chrome调试工具中显示结果是inline</p><p>4.标签：input、textarea、button、select……</p><p><strong>通过一个 dispiay 属性，可以改变标签的性别</strong></p><p>1.block:让元素显示为块级元素</p><p>2.inline：让元素显示为行内级元素</p><p>3.inline-block：让元素同时具备行内级、块级元素的特征</p><p><img src="'+L+'" alt="1692864288189"></p><h2 id="第四节-盒子模型" tabindex="-1"><a class="header-anchor" href="#第四节-盒子模型" aria-hidden="true">#</a> 第四节 盒子模型</h2><h3 id="_1-盒子模型介绍" tabindex="-1"><a class="header-anchor" href="#_1-盒子模型介绍" aria-hidden="true">#</a> 1.盒子模型介绍</h3><p><strong>盒子模型(Box Model)的组成</strong></p><ul><li>内容（content），盒子的内容，可以通过width/height 设置</li><li>内边距（padding），边框和内容之间的间距 ，也叫补白</li><li>边框（border），元素自己的边框</li><li>外边距（margin），盒子和其他盒子之间的间距</li><li>背景（background），分背景颜色和背景图片</li></ul><p><img src="'+G+'" alt="1692926017405"></p><h3 id="_2-内容的宽高" tabindex="-1"><a class="header-anchor" href="#_2-内容的宽高" aria-hidden="true">#</a> 2.内容的宽高</h3><ol><li>对于男标签和人妖标签可以设置盒子的宽高， 对于女标签来说, 设置宽高是无效的</li><li>min-width：最小宽度，无论内容多少，宽度都大于或等于min-width</li><li>max-width：最大宽度，无论内容多少，宽度都小于或等于max-width</li><li>移动端适配时, 可以设置最大宽度和最小宽度</li></ol><p><img src="'+M+'" alt="1692926610496"></p><h3 id="_3-内边距" tabindex="-1"><a class="header-anchor" href="#_3-内边距" aria-hidden="true">#</a> 3.内边距</h3><p>1.padding属性用于设置盒子的内边距, 通常用于设置边框和内容之间的间距</p><p>2.四个方向：padding-top：上内边距；padding-right：右内边距；padding-bottom：下内边距；padding-left：左内边距</p><p>3.padding-top、padding-right、padding-bottom、padding-left来设置某个方向的padding内边距</p><p>4.也可以通过padding属性来设置四个方向padding</p><p><img src="'+N+'" alt="1692927645941"></p><h3 id="_4-边框" tabindex="-1"><a class="header-anchor" href="#_4-边框" aria-hidden="true">#</a> 4.边框</h3><p>1.border用于设置盒子的边框</p><p>2.边框包含边框的宽度，边框的样式，边框的颜色</p><p><img src="'+T+'" alt="1692929189385"></p><p>3.边框的宽度</p><ul><li>border-top-width、border-right-width、border-bottom-width、border-left-width</li><li>border-width是上面4个属性的简写属性</li></ul><p>4.边框的颜色</p><ul><li>border-top-color、border-right-color、border-bottom-color、border-left-color</li><li>border-color是上面4个属性的简写属性</li></ul><p>5.边框样式</p><ul><li>border-top-style、border-right-style、border-bottom-style、border-left-style</li><li>border-style是上面4个属性的简写属性</li></ul><p><img src="'+V+'" alt="1692929339573"></p><p>6.单独设置某一边框</p><ul><li>border-top、border-right、border-bottom、border-left</li><li>border是上面4个属性的简写属性</li></ul><p>border</p><p>7.border主要是用来给盒子增加边框的, 但是在开发中我们也可以利用边框的特性来实现一些形状</p><ul><li>https://css-tricks.com/the-shapes-of-css/#top-of-site</li></ul><h3 id="_5-圆角" tabindex="-1"><a class="header-anchor" href="#_5-圆角" aria-hidden="true">#</a> 5.圆角</h3><ul><li>border-radius用于设置盒子的圆角</li><li>常见的值: 数值: 通常用来设置小的圆角, 比如6px;</li><li>常见的值: 百分比: 通常用来设置一定的弧度或者圆形</li><li>有四个属性 border-top-left-radius、border-top-right-radius、border-bottom-right-radius，和 border-bottom-left-radius，可以设置不同的方向的圆角。用的最多的还是border-radius。</li><li>如果一个元素是正方形, 设置border-radius大于或等于50%时，就会变成一个圆</li></ul><h3 id="_6-外边距" tabindex="-1"><a class="header-anchor" href="#_6-外边距" aria-hidden="true">#</a> 6.外边距</h3><ul><li><p>margin属性用于设置盒子的外边距, 通常用于元素和元素之间的间距</p></li><li><p>margin包括四个方向：margin-top：上外边距； magin--right：右外边距； margin-bottom：下外边距； margin--left：左外边距</p></li><li><p>margin单独编写是一个缩写属性 ​margin-top、margin-right、margin-bottom、margin-left的简写属性</p><p>margin缩写属性是从零点钟方向开始, 沿着顺时针转动的, 也 就是上右下左</p></li><li><p>margin也并非必须是四个值, 也可以有其他值</p></li></ul><p><img src="'+E+'" alt="1692930180886"></p><p><strong>兄弟元素之间的margin塌陷</strong></p><ul><li>margin有重叠问题，这个重叠问题，也叫margin的塌陷</li><li>兄弟元素之间的margin塌陷，之间的间隙，取决于最大的marign，并不是margin相加</li><li>兄弟元素之间的margin塌陷是发生在垂直方向，在水平方向上是没有塌陷</li><li>解决：设置时，一定要注意，要么设置上面盒子的下marign，要么设置下面盒子的上margin</li></ul><p><strong>父子元素之间的margin塌陷</strong></p><ul><li><p>父子元素之间margin也会塌陷, 给父元素设置margin-top，给子元素也设置margin-top,此时，就产生了margin的塌陷</p></li><li><p>如何解决父子元素之间的margin塌陷？</p><p>1.给父加边框</p><p>2.添加 overflow:hidden overflow 表示溢出的意思</p><p>3.给父元素设置padding-top</p><p>4.给父元素或子元素设置浮动</p></li></ul><p><strong>margin的其它知识点</strong></p><ul><li>利用margin可以让一个盒子水平居中 margin：0 auto；</li><li>margin也可以是负值，当margin为负值时，就会向另一个方向移动</li><li>对于女标签(盒子)来，margin垂直方向无效</li><li>览器会默认给部分标签设置默认的margin和padding，但一般在项目开始前需要先清除这些标签默认的margin和padding，后续自己设置</li></ul><h3 id="_7-外轮廓" tabindex="-1"><a class="header-anchor" href="#_7-外轮廓" aria-hidden="true">#</a> 7.外轮廓</h3><ul><li>outline表示元素的外轮廓,不占用空间,默认显示在border的外面</li><li>utline相关属性有 <ol><li>outline-width: 外轮廓的宽度</li><li>outline-style：取值跟border的样式一样，比如solid、dotted等</li><li>outline-color: 外轮廓的颜色</li><li>outline：outline-width、outline-style、outline-color的简写属性，跟border用法类似</li></ol></li></ul><h3 id="_8-盒子阴影" tabindex="-1"><a class="header-anchor" href="#_8-盒子阴影" aria-hidden="true">#</a> 8.盒子阴影</h3>',189),pl=l("li",null,"box-shadow属性可以设置一个或者多个阴影",-1),cl=l("li",null,"每个阴影用shadow表示，多个阴影之间用逗号,隔开，从前到后叠加",-1),dl=l("li",null,[i("常见格式 "),l("ol",null,[l("li",null,"第1个值：offset-x, 水平方向的偏移，正数往右偏移"),l("li",null,"第2个值：offset-y, 垂直方向的偏移，正数往下偏移"),l("li",null,"第3个值：blur-radius, 模糊半径"),l("li",null,"第4个值：spread-radius, 延伸半径"),l("li",null,"第5个值：color：阴影的颜色，如果没有设置，就跟随color属性的颜色"),l("li",null,"第6个值：inset：外框阴影变成内框阴影")])],-1),hl={href:"https://html-css-js.com/css/generator/box-shadow/",target:"_blank",rel:"noopener noreferrer"},gl=l("h3",{id:"_9-文字阴影",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_9-文字阴影","aria-hidden":"true"},"#"),i(" 9.文字阴影")],-1),ul=l("li",null,"text-shadow用法类似于box-shadow，用于给文字添加阴影效果",-1),bl={href:"https://html-css-js.com/css/generator/box-shadow/",target:"_blank",rel:"noopener noreferrer"},ml=e('<h3 id="_10-新的盒子模型" tabindex="-1"><a class="header-anchor" href="#_10-新的盒子模型" aria-hidden="true">#</a> 10.新的盒子模型</h3><ul><li>box-sizing用来设置盒子模型为新的盒子模型</li><li>值如果是border-box：padding、border都布置在width、height里边</li><li>值如果是content-box：padding、border都布置在width、height外边</li></ul><h3 id="_11-盒子背景" tabindex="-1"><a class="header-anchor" href="#_11-盒子背景" aria-hidden="true">#</a> 11.盒子背景</h3><ul><li>盒子的背景分背景颜色和背景图片</li></ul><p><strong>背景颜色</strong></p><ul><li>属性名：background-color（bgc）</li><li>颜色取值：关键字、rgb表示法、rgba表示法、十六进制……</li><li>背景颜色默认值是透明： rgba(0,0,0,0) 、transparent</li><li>背景颜色不会影响盒子大小，并且还能看清盒子的大小和位置，一般在布局中会习惯先给盒子设置背景颜色</li><li>背景颜色填充的区域默认是：内容区域+padding区域+border区域</li></ul><p><strong>背景图片</strong></p><ul><li>属性名：background-image（bgi）,会盖在(不是覆盖)background-color的上面</li><li>属性值是通过url函数来设置的，背景图片中url中可以省略引号</li><li>如果设置了背景图片后，元素没有具体的宽高，背景图片是不会显示出来的</li><li>背景图片默认是在水平和垂直方向平铺的</li></ul><p><img src="'+F+'" alt="1693185610817"></p><ul><li>背景图片仅仅是指给盒子起到装饰效果，类似于背景颜色，是不能撑开盒子的</li><li>计算机中坐标系和数学中的坐标系不一样</li></ul><p><img src="'+H+'" alt="1693185693636"></p><ul><li>通过background-repeat来设置图片是否平铺</li></ul><p><img src="'+R+'" alt="1693186163769"></p><ul><li>通过background-position来设置背景图片的位置</li></ul><p><img src="'+I+'" alt="1693186273880"></p><ul><li><p><strong>复合属性：background</strong></p><p>1.属性值：单个属性值的合写，取值之间以空格隔开</p><p>2.书写顺序：推荐(background：color image repeat position)</p><p>3.background-size可以省略，如果不省略，background-size必须紧跟在background-position的后面</p><p>4.其他顺序也都可以省略，而且顺序任意</p><p>5.在pc端，如果盒子大小和背景图片大小一样，此时可以直接写 background：url()</p></li></ul><h3 id="_12-字体图标" tabindex="-1"><a class="header-anchor" href="#_12-字体图标" aria-hidden="true">#</a> 12.字体图标</h3>',17),fl=l("li",null,"字体图标不是图片，就把它当成文本，放大不会失真，可以任意切换颜色，用到很多个图标时，文件相对图片较小。阿里icons：https://www.iconfont.cn/",-1),_l={href:"https://www.iconfont.cn/",target:"_blank",rel:"noopener noreferrer"},xl=l("li",null,"第二步: 通过link引入iconfont.css文件",-1),wl=l("li",null,[i("第三步: 使用字体图标 "),l("ul",null,[l("li",null,"方式一: 通过对应字体图标的Unicode来显示代码"),l("li",null,"方式二: 利用已经编写好的class, 直接使用即可;")])],-1),vl=e('<p><img src="'+J+'" alt="1693188810189"></p><p><img src="'+O+'" alt="1693188866296"></p><p><img src="'+P+'" alt="169318898154416931889815441693188916442"></p><p><img src="'+U+'" alt="1693188981544"></p><p><img src="'+X+'" alt="1693189035799"></p><h3 id="_13-精灵图" tabindex="-1"><a class="header-anchor" href="#_13-精灵图" aria-hidden="true">#</a> 13.精灵图</h3><ol><li>精灵图是CSS图像合成技术，将各种小图片合并到一张图片上，然后利用CSS的背景定位来显示对应的图片部分</li><li>好处： <ul><li>减少网页的http请求数量，加快网页响应速度，减轻服务器压力</li><li>解决了图片命名的困扰，只需要针对一张集合的图片命名</li></ul></li><li>制作 <ul><li>方法1：Photoshop, 设计人员提供</li><li>方法2：https://www.toptal.com/developers/css/sprite-generator</li></ul></li><li>使用 <ul><li>精灵图的原理是通过只显示图片的很小一部分来展示的</li><li>置对应元素的宽度和高度</li><li>设置精灵图作为背景图片</li><li>调整背景图片的位置来展示</li><li>获取精灵图的位置：http://www.spritecow.com/</li></ul></li></ol><p><img src="'+Y+'" alt="1693189462574"></p><h2 id="第五节-flex布局" tabindex="-1"><a class="header-anchor" href="#第五节-flex布局" aria-hidden="true">#</a> 第五节 Flex布局</h2><h3 id="_1-flex布局介绍" tabindex="-1"><a class="header-anchor" href="#_1-flex布局介绍" aria-hidden="true">#</a> 1.Flex布局介绍</h3><ul><li>flex目的就是为了让块级标签，可以并排显示。也叫弹性布局。之前让块级标签并排显示，使用浮动比较多，现在使用flex布局比较多</li><li>如果给一个元素设置了display:flex。那么就开启了flex布局</li><li>添加display:flex; 这个标签，叫容器</li><li>容器中的直接子元素叫项目。那么它的性别就变了，变成男标签</li></ul><p><img src="'+$+'" alt="1692946870280"></p><ul><li>项目默认就是在主轴上排列的</li><li>和主轴垂直那个轴叫交叉轴</li></ul><p><img src="'+q+'" alt="1692947018299"></p><h3 id="_2-容器相关的属性" tabindex="-1"><a class="header-anchor" href="#_2-容器相关的属性" aria-hidden="true">#</a> 2.容器相关的属性</h3><ul><li>flex-direction 决定主轴的方向</li><li>flex-wrap 项目压缩时，是否换行</li><li>flex-flow 是direction和wrap的简写</li><li>justify-content 处理主轴的富余空间</li><li>align-items 一行项目时，处理交叉轴的富余空间</li><li>align-content 多根主轴在交叉轴上的排序顺序（多行项目，处理交叉轴的富余空间）</li></ul><p><strong>容器属性之flex-direction</strong></p><ul><li>flex-direction 决定了 main axis 的方向，有 4 个取值</li><li>项目 默认都是沿着 main axis（主轴）从 main start 开始往 main end 方向排布</li><li>row（默认值）、row-reverse、column、column-reverse</li></ul><p><img src="'+A+'" alt="1692947420770"></p><p><strong>容器属性之flex-wrap</strong></p><ul><li>决定主轴是多根还是一根，或者是决定项目是否换行</li><li>fnowrap（默认）：单行</li><li>wrap：多行</li><li>wrap-reverse：多行（对比 wrap，cross start 与 cross end 相反）</li></ul><p><img src="'+D+'" alt="1692947756322"></p><p><strong>容器属性之flex-flow</strong></p><ul><li>flex-flow 属性是 flex-direction 和 flex-wrap 的简写</li><li>顺序任何, 并且都可以省略</li></ul><p><strong>容器属性之justify-content</strong></p><ul><li>justify-content决定项目在主轴的排列顺序</li><li>flex-start（默认值）：与 main start 对齐</li><li>flex-end：与 main end 对齐</li><li>center：居中对齐</li><li>space-between： <ul><li>flex items 之间的距离相等</li><li>与 main start、main end两端对齐</li></ul></li><li>space-around： <ul><li>flex items 之间的距离相等</li><li>flex items 与 main start、main end 之间的距离是 flex items 之间距离的一半</li></ul></li><li>space-evenly： <ul><li>flex items 之间的距离相等</li><li>flex items 与 main start、main end 之间的距离 等于 flex items 之间的距离</li></ul></li></ul><p><img src="'+K+'" alt="1692948611758"></p><p><strong>容器属性之align-item</strong></p><ul><li>决定项目在交叉轴上的对齐方式</li><li>normal：在弹性布局中，效果和stretch一样</li><li>stretch：当 flex items 在 cross axis 方向的 size 为 auto 时，会自动拉伸至填充 flex container</li><li>flex-start：与 cross start 对齐</li><li>flex-end：与 cross end 对齐</li><li>center：居中对齐</li><li>baseline：与基准线对齐</li></ul><p><img src="'+Q+'" alt="1692948698993"></p><p><strong>容器属性之align-content</strong></p><ul><li>决定多行项目在交叉轴上的对齐方式</li><li>stretch（默认值）：与 align-items 的 stretch 类似</li><li>flex-start：与 cross start 对齐</li><li>flex-end：与 cross end 对齐</li><li>center：居中对齐</li><li>space-between： <ul><li>flex items 之间的距离相等</li><li>与 cross start、cross end两端对齐</li></ul></li><li>space-around： ： <ul><li>flex items 之间的距离相等</li><li>flex items 与 cross start、cross end 之间的距离是 flex items 之间距离的一半</li></ul></li><li>space-evenly： <ul><li>flex items 之间的距离相等</li><li>flex items 与 cross start、cross end 之间的距离 等于 flex items 之间的距离</li></ul></li><li><img src="'+W+'" alt="1692949146743"></li></ul><h2 id="_3-项目相关的属性" tabindex="-1"><a class="header-anchor" href="#_3-项目相关的属性" aria-hidden="true">#</a> 3.项目相关的属性</h2><p><strong>项目属性之order</strong></p><ul><li>决定了 flex items 的排布顺序</li><li>可以设置任意整数（正整数、负整数、0），值越小就越排在前面</li><li>默认值是 0</li></ul><p><img src="'+Z+'" alt="1692950647262"></p><p><strong>项目属性之align-self</strong></p><ul><li>单独设置某个项目在交叉轴上的对齐方式</li></ul><p><img src="'+ll+'" alt="1692950804303"></p><p><strong>项目属性之flex-grow</strong></p><ul><li>决定了 flex items 如何扩展(拉伸/成长)</li><li>可以设置任意非负数字（正小数、正整数、0），默认值是 0</li><li>前提是有富余空间的情况下，才能拉伸/成长</li><li>富余空间size * flex-grow / sum</li></ul><p><strong>项目属性之flex-shrink</strong></p><ul><li>设置压缩比例</li><li>可以设置任意非负数字（正小数、正整数、0），默认值是 1</li><li>flex items 超出 flex container 的 size * 收缩比例 / 所有 flex items 的收缩比例之和</li></ul><p><strong>项目属性之flex-basis</strong></p><ul><li>设置项目在主轴上的宽度</li><li>auto（默认值）、具体的宽度数值（100px）</li><li>flex-basis的优先级是高于width</li></ul><p><strong>项目属性之flex属性</strong></p><ul><li>flex 是 flex-grow || flex-shrink || flex-basis 的简写,flex 属性可以指定1个，2个或3个值。</li><li>最最常用的：一个无单位数(number): 它会被当作flex-grow的值。</li></ul><p><strong>大家可以使用flex实现色子案例</strong>：https://blog.csdn.net/m0_61843874/article/details/121196912</p><h2 id="第六节-浮动布局" tabindex="-1"><a class="header-anchor" href="#第六节-浮动布局" aria-hidden="true">#</a> <strong>第六节 浮动布局</strong></h2><h3 id="_1-初识浮动布局" tabindex="-1"><a class="header-anchor" href="#_1-初识浮动布局" aria-hidden="true">#</a> 1.初识浮动布局</h3><ul><li>浮动布局的作用也是让男标签并排显示</li></ul><h3 id="_2-浮动布局的特点" tabindex="-1"><a class="header-anchor" href="#_2-浮动布局的特点" aria-hidden="true">#</a> 2.浮动布局的特点</h3><ul><li>浮动元素会脱标，在标准流中不占位置，有文本，会形成字围效果。</li><li>如果一个块级元素，在没有设置widht的情况下（前提条件）， 一旦使用float，那么它的宽度就会发生变化，尽量最小，包裹其内容，能够完全包裹其中的内容。</li><li>在一个块级容器中，如果它的子元素，都浮动了，父元素没有设置高度，那么块级容器将会塌陷。所谓的塌就是高度变成0了，这就是浮的破坏性。也就是说，浮动，它会对父元素造成影响，清除这种影响，也叫清除浮动。</li><li>如果女标签浮动了，它会自动地变成男标签，盒子模型的6大属性都会起作用。</li></ul><h3 id="_3-清除浮动布局" tabindex="-1"><a class="header-anchor" href="#_3-清除浮动布局" aria-hidden="true">#</a> 3.清除浮动布局</h3><ul><li>所谓的清除浮动，就是清除浮动所造成的影响，就是清除对父元素造成的影响和清除对后面兄弟元素造成的影响。</li></ul><p><strong>对父元素造成影响：</strong></p><p>1.如果父元素内部的所有的子元素都浮动了，如果父元素没有设置高度，那么它的高度就会塌陷，就是高度变成0了。 2.有了影响，就需要我们清除这种影响，清除这种影响，叫清除浮动。</p><p><strong>清除对父元素造成影响：</strong></p><p>1.加高法 2.overflow:hidden; 3.内墙法 在父元素内部的最后面添加一堵墙 clear: both; 专门用来清除影响的 4.使用伪元素来清除浮动</p><p><strong>对后面的兄弟元素造成影响：</strong></p><p>clear: both; clear后面可以跟left，表示清除左浮动造成的影响 clear后面可以跟right，表示清除右浮动造成的影响。通常情况下，我们会直接写clear:both。 表示清除左右浮动造成的影响哪个兄弟受了影响，就写在哪个兄弟上面的。</p><h2 id="第七节-定位" tabindex="-1"><a class="header-anchor" href="#第七节-定位" aria-hidden="true">#</a> 第七节 定位</h2><h3 id="_1-定位介绍" tabindex="-1"><a class="header-anchor" href="#_1-定位介绍" aria-hidden="true">#</a> 1.定位介绍</h3><p><strong>标准文档流：</strong></p><ul><li>默认情况下，元素都是按照normal flow（标准流、常规流、正常流、文档流【document flow】）进行排布</li><li>块级元素独占一行 → 垂直布局</li><li>行内元素/行内块元素一行显示多个 → 水平布局</li><li>默认情况下，互相之间不存在层叠现象</li><li>在标准流中，可以使用margin、padding对元素进行定位，其中margin还可以设置负数</li><li>设置一个元素的margin或者padding，通常会影响到标准流中其他元素的定位效果，不便于实现元素层叠的效果</li><li>如果我们希望一个元素可以跳出标准文档流,可以通过position属性来进行设置</li><li>定位可以让元素自由的摆放在网页的任意位置</li><li>一般用于盒子之间的层叠情况，定位之后的元素层级最高，可以层叠在其他盒子上面</li></ul><p><img src="'+il+'" alt="1693358890294"></p><ul><li>定位方式</li></ul><p><img src="'+sl+'" alt="1693358955046"></p><ul><li>只有position属性是不行的，还需要其它属性配合设置它的偏移量：</li></ul><p><img src="'+tl+'" alt="1693359026088"></p><p><strong>总结：</strong></p><ul><li>相对定位 position:relative; left right top bottom</li><li>绝对定位 postion:absoute; left right top bottom</li><li>固定定位 position:fixed; left right top bottom</li></ul><h3 id="_2-相对定位" tabindex="-1"><a class="header-anchor" href="#_2-相对定位" aria-hidden="true">#</a> 2.相对定位</h3><ul><li>相对于自己之前的位置进行移动，对盒子的位置进行微调，可以使用相对定位。</li><li>可以通过left、right、top、bottom其中的两个属性来设置偏移量。</li><li>定位参照对象是元素自己原来的位置</li><li>在页面中占位置，没有脱标</li><li>应用场景：1）配合绝对定位组（子绝父相） 2）在不影响其他元素位置的前提下，对当前元素位置进行微调</li></ul><p><img src="'+el+'" alt="1693359190479"></p><h3 id="_3-绝对定位" tabindex="-1"><a class="header-anchor" href="#_3-绝对定位" aria-hidden="true">#</a> 3.绝对定位</h3><ul><li>在页面中不占位置，元素脱离normal flow（脱离标准流、脱标）</li><li>参考点是需要手动设置的。代码：position:relative; 一般情况下，参考点都是父元素。子绝父相。</li><li>如果没有设置参考点，一级一级向上找，直到body。如果body也没有设置，就以body作为参考点。</li><li>可以通过left、right、top、bottom其中的两个属性来设置偏移量。</li><li>通过z-index可以改变绝对定位元素的层叠顺序，值越大，越在上面。</li></ul><p><img src="'+al+'" alt="1693360558045"></p><h3 id="_4-固定定位" tabindex="-1"><a class="header-anchor" href="#_4-固定定位" aria-hidden="true">#</a> 4.固定定位</h3><ul><li>元素脱离normal flow（脱离标准流、脱标）</li><li>参考点是整个浏览器（视口）</li><li>可以通过left、right、top、bottom其中的两个属性来设置偏移量。</li><li>如果是女标签绝对定位或固定定位了，就会变成男标签。</li></ul><p><strong>总结：</strong></p><p><img src="'+nl+'" alt="1693362355814"></p><h2 id="第八节-布局套路" tabindex="-1"><a class="header-anchor" href="#第八节-布局套路" aria-hidden="true">#</a> 第八节 布局套路</h2><h3 id="_1-table布局-淘汰" tabindex="-1"><a class="header-anchor" href="#_1-table布局-淘汰" aria-hidden="true">#</a> 1.table布局（淘汰）</h3><ul><li>父级容器—display: table</li><li>子级容器—display:table-cell</li></ul><h3 id="_2-浮动布局" tabindex="-1"><a class="header-anchor" href="#_2-浮动布局" aria-hidden="true">#</a> 2.浮动布局</h3><ul><li>两列布局解决方案(一边固定，另外一边动态变化)</li><li>三列布局解决方案，左边固定，中间固定，右侧自适应</li></ul><h3 id="_3-inline-block布局-了解" tabindex="-1"><a class="header-anchor" href="#_3-inline-block布局-了解" aria-hidden="true">#</a> 3.inline-block布局(了解)</h3><ul><li>使用inline-block布局，回车换行会导致间隙，把父元素的fs设置成0，再单独给每个子元素设置fs</li></ul><h3 id="_4-flex布局" tabindex="-1"><a class="header-anchor" href="#_4-flex布局" aria-hidden="true">#</a> 4.flex布局</h3><ul><li>使用flex布局，使用水平竖直居中</li><li>使用flex，实现两列布局，一侧固定，一侧自适应</li></ul><h3 id="_5-grid布局-布局" tabindex="-1"><a class="header-anchor" href="#_5-grid布局-布局" aria-hidden="true">#</a> 5.Grid布局（布局）</h3><ul><li>自行研究，参考文章：https://blog.csdn.net/ancartoon/article/details/121514585</li></ul><h3 id="_6-columns布局-了解" tabindex="-1"><a class="header-anchor" href="#_6-columns布局-了解" aria-hidden="true">#</a> 6.columns布局（了解）</h3><ul><li>CSS属性 <strong>columns</strong> 用来设置元素的列宽和列数</li></ul><h3 id="_7-水平居中" tabindex="-1"><a class="header-anchor" href="#_7-水平居中" aria-hidden="true">#</a> 7.水平居中</h3><ul><li>文本的水平居中</li><li>一个男标签水平居中</li><li>多个男标签水平居中</li><li>已知父子宽高，使用绝对定位让一个男标签水平居中</li><li>已知父宽高，不知子宽高，让一个男标签水平居中</li><li>使用flex布局，实现水平居中</li></ul><h3 id="_8-垂直居中" tabindex="-1"><a class="header-anchor" href="#_8-垂直居中" aria-hidden="true">#</a> 8.垂直居中</h3><ul><li><p>单行文本实现垂直居中</p></li><li><p>多行文本的垂直居中</p></li><li><p>图片实现垂直居中</p></li><li><p>让男标签实现垂直居中</p><p>1.table布局（淘汰）</p><p>2.flex（display:flex; align-items:center; ）</p><p>3.定位（子绝父相） + margin负值 或 transfrom</p></li><li><p>多个盒子实现垂直居中</p></li></ul><h3 id="_9-水平垂直居中" tabindex="-1"><a class="header-anchor" href="#_9-水平垂直居中" aria-hidden="true">#</a> 9.水平垂直居中</h3><ul><li>position + margin负值 / transform</li><li>flex + justify-content + align-items</li></ul><h3 id="_10-圣杯布局" tabindex="-1"><a class="header-anchor" href="#_10-圣杯布局" aria-hidden="true">#</a> 10.圣杯布局</h3><p>1.圣杯布局是来源于该布局效果类似圣杯而得名。简单来说，就是指三行三列布局</p><p>2.圣杯布局核心：主要是实现中间主体部分中的左右定宽+中间自适应的布局效果</p><p>3.center 要放在前面原因是在样式加载慢或无样式的时候先向用户呈现主要内容</p><ul><li>使用浮动+定位+margin为负值实现圣杯布局</li><li>使用flex布局，非常方便使用圣杯布局</li></ul><h3 id="_11-双飞翼布局" tabindex="-1"><a class="header-anchor" href="#_11-双飞翼布局" aria-hidden="true">#</a> 11.双飞翼布局</h3><ul><li>双飞翼布局最早是淘宝团队提出，是针对圣杯布局的优化解决方案。 主要是优化了圣杯布局中开启定位的问题。</li></ul><h3 id="_12-全屏布局" tabindex="-1"><a class="header-anchor" href="#_12-全屏布局" aria-hidden="true">#</a> 12.全屏布局</h3><ul><li>全屏布局就是指HTML页面铺满整个浏览器窗口，并且没有滚动条。而且还可以跟着浏览器的大小变化而变化；</li></ul><p>设计图：https://share.lanhuapp.com/#/invite?sid=lXJYbL47</p><p>目标：https://yujingbo1023.github.io/xm/</p>',112);function kl(yl,Sl){const s=n("ExternalLinkIcon");return r(),o("div",null,[ol,l("ul",null,[pl,cl,dl,l("li",null,[i("通过一个网站测试盒子的阴影: "),l("a",hl,[i("https://html-css-js.com/css/generator/box-shadow/"),t(s)])])]),gl,l("ul",null,[ul,l("li",null,[i("以通过一个网站测试文字的阴影: "),l("a",bl,[i("https://html-css-js.com/css/generator/box-shadow/"),t(s)])])]),ml,l("ul",null,[fl,l("li",null,[i("使用步骤： "),l("ol",null,[l("li",null,[i("第一步：登录阿里icons（"),l("a",_l,[i("https://www.iconfont.cn/ (opens new window)"),t(s)]),i("），下载代码，并且拷贝到项目中")]),xl,wl])])]),vl])}const zl=a(rl,[["render",kl],["__file","02-cssxuexi.html.vue"]]);export{zl as default};
