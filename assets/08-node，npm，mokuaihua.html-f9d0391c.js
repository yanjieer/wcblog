import{_ as n,o as s,c as a,a as t}from"./app-72fa0c51.js";const p="/wcblog/assets/1696640955486.83579ae6-f7c40230.png",e="/wcblog/assets/1696644223683.07564225-405485b0.png",o="/wcblog/assets/1696641448786.51fcf4b2-57c61b79.png",i="/wcblog/assets/1696641488134.29677f96-1ec9bbdd.png",c="/wcblog/assets/1696678564874-5564dbde.png",l="/wcblog/assets/1696678613802-00bbe1d6.png",u="/wcblog/assets/1696642023305.573ffc03-e03187eb.png",r="/wcblog/assets/1696642094725.da2a6fa3-d40f0826.png",d="/wcblog/assets/1696642275010.5fff8689-dd221088.png",m="/wcblog/assets/1696642316053.55aff213-0290ac79.png",k="/wcblog/assets/1696642379173.b22f9dc8-7c90fca9.png",g="/wcblog/assets/1696642481917.95008ac5-63c10630.png",v="/wcblog/assets/1696642513471.d29303c5-500d84a0.png",b="/wcblog/assets/1696642534612.434c2128-cd48b9d2.png",_="/wcblog/assets/1696642621893.73b5d48f-ceab616f.png",f="/wcblog/assets/1696643735469.94b87e38-53de1c9e.png",h="/wcblog/assets/1696643966446.eddeb65c-d1ad0a12.png",w="/wcblog/assets/1696644088160.ecdf91ab-7aac0b67.png",x="/wcblog/assets/1696644143099.e6ffdd2f-a8391570.png",y="/wcblog/assets/1696644223683.07564225-405485b0.png",q="/wcblog/assets/1696680465316-26d055c0.png",j="/wcblog/assets/1696645437230.c168e70e-130b4708.png",S="/wcblog/assets/1696645488865.d7961f9b-f69e729e.png",N="/wcblog/assets/1696645664260.4ba3ac61-405d4991.png",D="/wcblog/assets/1696645715842.b988499d-47111183.png",J="/wcblog/assets/1696645743287.004517f4-2ef2e23f.png",T="/wcblog/assets/1696645774759.360416d4-29337aa3.png",M="/wcblog/assets/1696646270552.4958d1b2-c8e40ac1.png",C="/wcblog/assets/1696646360969.9b88f6dd-c717988b.png",E="/wcblog/assets/1696646462308.7d1043ea-7b92ad4e.png",P="/wcblog/assets/1696646873074.1d86c5c9-a889c78b.png",I="/wcblog/assets/1696646895846.b633ea68-c04a8005.png",z="/wcblog/assets/1696647104051.169953cb-8b0b34ab.png",B="/wcblog/assets/1696647139109.cfcdcbb6-a9135e63.png",O="/wcblog/assets/1696647275196.21989c66-ba2c545f.png",A="/wcblog/assets/1696647301599.86e8a2d2-00337461.png",F="/wcblog/assets/1696647354477.61507e41-f8438972.png",V="/wcblog/assets/1696688082240-ce02bfb3.png",G="/wcblog/assets/1696688122776-0fd4a146.png",K="/wcblog/assets/1696688208201-58af8a97.png",X="/wcblog/assets/1696688578250-35c559e3.png",Y="/wcblog/assets/1696689691938-4a4778b6.png",Z="/wcblog/assets/1696689802076-40ff4546.png",H="/wcblog/assets/1696690036866-679f6693.png",L="/wcblog/assets/1696690234643-11f78a92.png",Q="/wcblog/assets/1696649428775.18bffc98-8c513b6a.png",R="/wcblog/assets/1696756473175-f4611571.png",U="/wcblog/assets/1696662001488.89308f03-4ec085b2.png",W="/wcblog/assets/1696662027454.f155bb17-3443b867.png",$="/wcblog/assets/1696662703908.1fe8148d-80a41e4e.png",nn="/wcblog/assets/1696662209957.e2d089fb-f2113617.png",sn="/wcblog/assets/1696662326682.b8b88948-e4bb8b76.png",an="/wcblog/assets/1696662494044.d57abdff-7ee0813c.png",tn="/wcblog/assets/1696662551869.a8ba6c40-c7d11c42.png",pn="/wcblog/assets/1696662596331.0495044b-fc1977f5.png",en="/wcblog/assets/1696662739064.628c15d2-e0224278.png",on="/wcblog/assets/1696662805274.deff9128-81b5cf2c.png",cn="/wcblog/assets/1696662927189.3b10b20d-e79ffb6c.png",ln="/wcblog/assets/1696662961166.7504e70c-57f808cf.png",un="/wcblog/assets/1696663035515.3ddf4ced-8f43dad1.png",rn="/wcblog/assets/1696663277754.457a96d2-c69fc301.png",dn="/wcblog/assets/1696663413035.ce5a09d4-f72e4e63.png",mn="/wcblog/assets/1696663455093.cb386ffa-8ec5a1e1.png",kn="/wcblog/assets/1696663596099.30537d9b-fe818075.png",gn="/wcblog/assets/1696663899230.4601e838-2491518e.png",vn="/wcblog/assets/1696663939208.a4595c8c-0c7738f6.png",bn="/wcblog/assets/1696664066344.95a55daa-8fa6889c.png",_n="/wcblog/assets/1696664141853.63af13ff-8fbd40ae.png",fn="/wcblog/assets/1696664373319.eac657b2-07e32ff1.png",hn="/wcblog/assets/1696664424300.5439d0a8-bc43ec9e.png",wn="/wcblog/assets/1696664665863.765f1cee-330e9b7d.png",xn="/wcblog/assets/1696664723073.fe8c976c-e4a3a887.png",yn="/wcblog/assets/1696664786904.09c2432b-94c944e5.png",qn="/wcblog/assets/1696665817150.8adbd8e3-804e14e1.png",jn="/wcblog/assets/1696665867333.99cb4f94-1c357da9.png",Sn="/wcblog/assets/1696665989216.90daef85-bdf5f936.png",Nn="/wcblog/assets/1696666164236.30194720-883b7f88.png",Dn="/wcblog/assets/1696666282822.7838e651-ef7272f7.png",Jn="/wcblog/assets/1696666490736.5553e27f-a6b0e52f.png",Tn="/wcblog/assets/1696666682799.1ee45bbe-5b5e3a2a.png",Mn="/wcblog/assets/1696667249399.b1af2042-69598721.png",Cn="/wcblog/assets/1696667268809.56eb2149-7104f640.png",En="/wcblog/assets/1696667339318.2e398cf4-1696769978229-c795866f.png",Pn="/wcblog/assets/1696667476053.9715d627-5f12a667.png",In="/wcblog/assets/1696669205001.65cfee41-8ae7f346.png",zn="/wcblog/assets/1696669290817.ae8fd082-3483640c.png",Bn="/wcblog/assets/1696669344688.a9fb3ce3-2a166a28.png",On="/wcblog/assets/1696669500914.a9f2dcca-bfc618e8.png",An="/wcblog/assets/1696669527831.4a639ca8-a9225ba7.png",Fn="/wcblog/assets/1696669837741.756f0133-144262af.png",Vn="/wcblog/assets/1696669888698.8ce51f51-42139d8a.png",Gn="/wcblog/assets/1696669969370.df08f059-3fed780c.png",Kn="/wcblog/assets/1696670496053.19dabaf5-43067dfe.png",Xn="/wcblog/assets/1696671442101.726c82e4-504a2c6e.png",Yn="/wcblog/assets/1696671567852.2888b1d7-d93cdc79.png",Zn="/wcblog/assets/1696671593843.c88f5f4b-e940efcd.png",Hn="/wcblog/assets/1696671639541.bd541bd2-f177d768.png",Ln="/wcblog/assets/1696671708298.0ae95810-8af3e634.png",Qn="/wcblog/assets/1696671793696.4bdc27bf-f7b2873e.png",Rn="/wcblog/assets/1696672184508.720e48dd-b93f3523.png",Un="/wcblog/assets/1696672232105.036ff7d5-81596788.png",Wn="/wcblog/assets/1696672597661.7ec7ecb1-1c8b681b.png",$n={},ns=t('<h2 id="一-node介绍" tabindex="-1"><a class="header-anchor" href="#一-node介绍" aria-hidden="true">#</a> 一， Node介绍</h2><h3 id="_1-什么是node" tabindex="-1"><a class="header-anchor" href="#_1-什么是node" aria-hidden="true">#</a> 1，什么是node</h3><p>官方对Node.js的定义：Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。</p><p>中文网：https://nodejs.org/zh-cn/</p><p><img src="'+p+'" alt="1696640955486"></p><p>node就是JS代码的运行环境，之前，我们写的JS代码都是在浏览器环境中运行。从今天开始，我们写JS代码，就需要在Node环境中运行了。 到目前为止，运行JS代码，有两个环境：</p><ul><li>浏览器</li><li>node环境</li></ul><p>现在作为前端开发者，node是必学的：</p><ul><li>前端目录存在的依赖（包），都是以node包的形式进行管理，后面会大量学习别人封装好的包。</li><li>node也可以做为web服务器，配合mysql数据库，再学一个koa或express框架，就可以开接口。</li><li>vue或react框架，到时候，需要学习服务器渲染，也是基于node的。</li><li>electron框架，用来开发桌面应用，也是基于node的</li><li>....</li></ul><p><strong>Node的应用场景</strong></p><ul><li>前端开发的库都是以node包的形式进行管理，后面会学习大量的库</li><li>npm、yarn工具成为前端开发使用最多的工具</li><li>服务端渲染，借助Node.js完成前后端渲染的同构应用</li><li>使用Node可以编写一些脚本工具</li><li>Node也可以开API接口</li><li>使用Electron来开发桌面应用程序，是需要使用Node</li><li>使用Node.js作为web服务器开发、中间件、代理服务器</li><li>....</li></ul><h3 id="_2-node安装" tabindex="-1"><a class="header-anchor" href="#_2-node安装" aria-hidden="true">#</a> 2, node安装</h3><p>网址：https://nodejs.org/dist/v16.16.0/ -- 傻瓜式安装</p><p><img src="'+e+'" alt="1696644223683"></p><p>如何证明node安装好了？</p><p>答：键盘中的win+r：弹出一个窗口中，在窗口中输入cmd命令，就会弹出一个CMD窗口，在CMD窗口中输入：node -v，如果弹出了版本号，表示node安装成功了</p><p><img src="'+o+'" alt="1696641448786"></p><p><img src="'+i+'" alt="1696641488134"></p><h3 id="_3-安装多个版本的node" tabindex="-1"><a class="header-anchor" href="#_3-安装多个版本的node" aria-hidden="true">#</a> 3，安装多个版本的node</h3><p>有时候，我们需要在电脑上安装不同的版本的node，使用nvm。nvm: node version manger。下载：</p><p><img src="'+c+'" alt="1696678564874"></p><p>下载nvm-setup.ext。安装也是傻瓜式安装。证明安装OK：在CMD窗口中，输入nvm version。如下：</p><p><img src="'+l+'" alt="1696678613802"></p><p>安装完后，就可以利用nvm下载其它版本的node的。必须以管理员的身份打开cmd窗口。如下：</p><p><img src="'+u+'" alt="1696642023305"></p><p><img src="'+r+'" alt="1696642094725"></p><p>nvm有如下几个命令：</p><ul><li>nvm list 查看电脑上都安装了哪些版本的node</li><li>nvm install 16.18.0 安装指定版本的node</li><li>nvm use 16.18.0 使用指定版本的node</li></ul><p><img src="'+d+'" alt="1696642275010"></p><p><img src="'+m+'" alt="1696642316053"></p><p><img src="'+k+'" alt="1696642379173"></p><h3 id="_4-卸载node" tabindex="-1"><a class="header-anchor" href="#_4-卸载node" aria-hidden="true">#</a> 4，卸载node</h3><p>找到控制面板：</p><p><img src="'+g+'" alt="1696642481917"></p><p><img src="'+v+'" alt="1696642513471"></p><p><img src="'+b+'" alt="1696642534612"></p><p>光点卸载是不行的，还需要删除两个文件夹，如下：</p><p><img src="'+_+'" alt="1696642621893"></p><p>可能会遇到的问题，如下：</p><p><img src="'+f+'" alt="1696643735469"></p><p>原因：在你安装的时候，可以安装不成功，因为你安装时，他是从国外下载Node的，可能不成功。需要换源，找到nvm的安装路径，在安装目录下面，有一个settings.txt文件，打开这个文件：</p><p><img src="'+h+`" alt="1696643966446"></p><p>使用vscode打开此文件，换源：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>root: D:\\develop\\nvm
path: C:\\Program Files\\nodejs
node_mirror:npm.taobao.org/mirrors/node/
npm_mirror:npm.taobao.org/mirrors/npm/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+w+'" alt="1696644088160"></p><p>保存，把cmd窗口关掉，重新打开，再重新安装node，如下：</p><p><img src="'+x+'" alt="1696644143099"></p><p>如果还不行，把nvm也卸载掉，去安装16.16.0的node，如下：</p><p><img src="'+y+'" alt="1696644223683"></p><h3 id="_5-安装npm" tabindex="-1"><a class="header-anchor" href="#_5-安装npm" aria-hidden="true">#</a> 5，安装npm</h3><p>安装了node，会自动安装npm，如下：</p><p><img src="'+q+'" alt="1696680465316"></p><h3 id="_6-在node环境中运行js代码" tabindex="-1"><a class="header-anchor" href="#_6-在node环境中运行js代码" aria-hidden="true">#</a> 6，在node环境中运行JS代码</h3><p>方式一：打开JS文件所在文件夹，在输入框，输出cmd，按回车。</p><p><img src="'+j+'" alt="1696645437230"></p><p><img src="'+S+'" alt="1696645488865"></p><p>方式二：vscode中，打开cmd窗口</p><p><img src="'+N+'" alt="1696645664260"></p><p>方式三：安装一个vscode插件</p><p><img src="'+D+'" alt="1696645715842"></p><p><img src="'+J+'" alt="1696645743287"></p><p><img src="'+T+'" alt="1696645774759"></p><h3 id="_7-node事件环" tabindex="-1"><a class="header-anchor" href="#_7-node事件环" aria-hidden="true">#</a> 7，node事件环</h3><p>之前node事件环和浏览器事件环还是不一样的，但现在基本上一样了。面试时，可能会问到。回顾一个浏览器的事件环：</p><ul><li>代码从上到下执行，遇到宏任务，就放到宏任务队列，遇到微任务，就放到微任务队列，先把所有的同步代码执行完毕。</li><li>清空微任务队列</li><li>从宏任务队列中取出一个宏任务，执行，执行时，还可能遇到宏任务或微任务，重复第一步。</li><li>一个宏任务执行完毕，清空微任务队列，再取一个宏任务执行，也就是说在执行宏任务时，微任务队列需要清空。</li></ul><p><strong>node环境中能写dom或bom代码吗？</strong></p><p>答：不能，官方对Node.js的定义：Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。浏览器中的JS包含三个部分：ES + BOM + DOM。我们说的JS运行时环境，运行的是ES代码。BOM和DOM是属于浏览器中的内容。</p><p>在node环境中，添加了一个定时器，叫setImmediate，肯定是一个异步任务，是宏任务，写代码演示：</p><p><img src="'+M+'" alt="1696646270552"></p><p>setImmediate setTimeout 谁先执行不好说，演示如下：</p><p><img src="'+C+'" alt="1696646360969"></p><p>在node环境中，还有一个微任务 nextTick(() =&gt; {})，如下：</p><p><img src="'+E+`" alt="1696646462308"></p><p><strong>练习</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script start&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;requestData&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout&quot;</span><span class="token punctuation">)</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;getData start&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then1-res:&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;getData end&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script end&quot;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

执行结果：
script start
getData start
requestData
script end
setTimeout
then1-res: wc
getData end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script start&quot;</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script end&quot;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

执行结果：
script start
promise1
2
script end
then1
then3
setTimeout1
then2
then4
setTimeout2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>

    <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise3&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

执行结果：
script start
async1 start
async2
promise1
promise2
script end
async1 end
promise3
setTimeout0
setTimeout2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

执行结果：
script start
async1 start
async2
promise1
script end
async1 end
promise2
setTimeout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-模块化" tabindex="-1"><a class="header-anchor" href="#二-模块化" aria-hidden="true">#</a> 二， 模块化</h2><h3 id="_1-什么是模块" tabindex="-1"><a class="header-anchor" href="#_1-什么是模块" aria-hidden="true">#</a> 1， 什么是模块</h3><ul><li>在node中一个 js 文件就是一个模块</li><li>模块内部代码对于外部来说都是不可见的，可以通过两种方式向外部暴露</li><li>模块化（组件化）指的就是将一个大的功能拆分为一个一个小的模块，通过不同的模块的组合来实现一个大功能。</li><li>优点：1. 复用性 2. 维护性</li></ul><p>没的模块化，面临的问题，通过代码演示：</p><p><img src="`+P+'" alt="1696646873074"></p><p><img src="'+I+'" alt="1696646895846"></p><p>创建一个index.html文件，引入上面的两个文件，如下：</p><p><img src="'+z+'" alt="1696647104051"></p><p>浏览器中执行，效果如下：</p><p><img src="'+B+'" alt="1696647139109"></p><p>早期使用IIFE解决命名冲突问题，如下：</p><p><img src="'+O+'" alt="1696647275196"></p><p><img src="'+A+'" alt="1696647301599"></p><p><img src="'+F+'" alt="1696647354477"></p><p>总结一下：</p><ul><li>第一，我必须记得每一个模块中返回对象的命名，才能在其他模块使用过程中正确的使用</li><li>第二，代码写起来混乱不堪，每个文件中的代码都需要包裹在一个匿名函数中来编写；</li><li>第三，在没有合适的规范情况下，每个人、每个公司都可能会任意命名、甚至出现模块名称相同的情况；</li></ul><h3 id="_2-commonjs规范" tabindex="-1"><a class="header-anchor" href="#_2-commonjs规范" aria-hidden="true">#</a> 2，commonjs规范</h3><p>CommonJS是一个规范，简称为CJS，Node是CommonJS在服务器端一个具有代表性的实现</p><ul><li>Node在服务器端实现了这个规范</li><li>webpack打包工具具备对CommonJS的支持和转换</li></ul><p><strong>CommonJS规范要求</strong></p><ul><li>在Node中每一个js文件都是一个单独的模块，模块与模块之间天生隔绝，天生就不会相互污染</li><li>模块中包括CommonJS规范的核心变量：exports、module.exports、require，使用这些变量来方便的进行模块化开发</li><li>exports和module.exports可以负责对模块中的内容进行导出</li><li>require函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容</li></ul><p><strong>exports导出</strong></p><ul><li>exports是一个对象，我们可以在这个对象中添加很多个属性，添加的属性会导出</li><li>另外一个文件中可以导入，require通过各种查找方式，最终找到了exports这个对象，将这个exports对象赋值给一个变量</li></ul><p>代码演示：</p><p><img src="'+V+'" alt="1696688082240"></p><p><img src="'+G+'" alt="1696688122776"></p><p>创建一个模块，进行导入，如下：</p><p><img src="'+K+'" alt="1696688208201"></p><p>当我们去require一个模块时，它会把模块中的代码全部执行，require多次时，也是执行一次，因为第1次去执行时，就把结果放到缓存中了，第二次再去require时，直接从缓存中获取结果，不会再去模块中的代码，如下：</p><p><img src="'+X+'" alt="1696688578250"></p><p><strong>module.exports导出</strong></p><ul><li>CommonJS中是没有module.exports的概念的</li><li>但是为了实现模块的导出，Node中使用的是Module的类，每一个模块都是Module的一个实例，也就是module</li><li>所以在Node中真正用于导出的其实根本不是exports，而是module.exports，module才是导出的真正实现者</li><li>之所以exports也可以导出，是因为module对象的exports属性是exports对象的一个引用</li><li>就是说 module.exports = exports</li></ul><p>代码演示：</p><p><img src="'+Y+'" alt="1696689691938"></p><p><img src="'+Z+'" alt="1696689802076"></p><p>在源码中exports 和 module.exports指向了同一个对象，指向同一个堆，在源码中是这样的： exports = module.exports</p><p><img src="'+H+'" alt="1696690036866"></p><p>上面的两种写法，用的都不多，常用的写法，如下：</p><p><img src="'+L+'" alt="1696690234643"></p><p>让exports指向一个新堆，能不能导出数据呢？如下：</p><p><img src="'+Q+'" alt="1696649428775"></p><p>总结导出数据：</p><ul><li>方式一： exports.a = a; exports.b = b; 在源码中是这样的： exprots = module.exports</li><li>方式二： module.exports.a = a; module.exports.b = b;</li><li>方式三： module.exports = { a, b }</li><li>注意：不能这样写：exports = { a, b };</li></ul><h3 id="_3-导入" tabindex="-1"><a class="header-anchor" href="#_3-导入" aria-hidden="true">#</a> 3，导入</h3><p><strong>require是一个函数，可以帮助我们引入一个文件（模块）中导出的对象</strong></p><p>模块分类：</p><ul><li>自定义模块，就是程序员自己写的模块 a.js。必须以./或../打头。</li><li>系统模块 node中提供好的模块，不需要下载，也叫核心模块，这些模块在安装node时，就安装到你电脑上了。</li><li>第三方模块 一些大牛自已开发的模块，上传上网上，我们用的时候，就需要下载安装</li></ul><p>代码演示：</p><p><img src="'+R+'" alt="1696756473175"></p><p>require函数解析流程：</p><ul><li>情况一：require(&quot;x&quot;) -- x是一个Node系统模块，如：path、http <ul><li>直接去电脑上找系统模块，找到了，就停止查找</li></ul></li><li>情况二：require(&quot;./x.js 或 ../x.js&quot;) -- x是以./ 或 ../ 或 /(根目录) 开头的，表示是自定义模块 <ul><li>require(&quot;./x.js&quot;) -- 有后缀名，直接找到对应文件</li><li>require(&quot;./x&quot;) --没有后缀名，查找顺序 <ul><li>1，直接查找文件x</li><li>2，查找文件x.js文件</li><li>3，查找x.json文件</li><li>4，查找x.node文件</li><li>如果还没有找到对应文件，接着会把x当成目录，然后查找目录下的文件 <ul><li>1，查找x/index.js文件</li><li>2，查找x/index.json文件</li><li>3，查找x/index.node文件</li></ul></li></ul></li><li>如果还没有找到，则会报错：not found</li></ul></li><li>情况三：require(&quot;x&quot;) -- x不是系统模块，而是一个第三方模块 <ul><li>会在用户电脑上查找这个第三方模块，会在多个地方查找，如果找不到就会报错</li></ul></li></ul><h3 id="_4-es6module规范" tabindex="-1"><a class="header-anchor" href="#_4-es6module规范" aria-hidden="true">#</a> 4，ES6Module规范</h3><p><strong>ECMA推出自己的模块化系统，弥补了JavaScript没有模块化一直是它的痛点</strong></p><ul><li>CommonJS、AMD、CMD等，仅仅是JS社区的规范，并不是官方的</li><li>采用ES Module将自动采用严格模式：use strict</li></ul><p><strong>ES Module模块采用export和import关键字来实现模块化</strong></p><ul><li>export负责将模块内的内容导出</li><li>import负责从其他模块导入内容</li></ul><p><strong>规范：</strong></p><ul><li>每一个文件，都是一个模块，模块与模块之间天生隔离</li><li>你想让别人使用你的数据，你就需要导出去</li><li>你想用别人的数据，你就是导进来</li></ul><p>代码演示：</p><p><img src="'+U+'" alt="1696662001488"></p><p><img src="'+W+'" alt="1696662027454"></p><p><img src="'+$+'" alt="1696662703908"></p><p>如何运行代码，先在node环境中运行，如下：</p><p><img src="'+nn+'" alt="1696662209957"></p><p>在浏览器中运行上面的main.js，如下：</p><p><img src="'+sn+'" alt="1696662326682"></p><p>说明浏览器默认也不支持ES6Module，需要告诉浏览器，我们要采用模块化，如下：</p><p><img src="'+an+'" alt="1696662494044"></p><p>此时，需要安装一个vscode插件，叫live server，如下：</p><p><img src="'+tn+'" alt="1696662551869"></p><p>通过插件运行网页，就会走http协议，如下：</p><p><img src="'+pn+'" alt="1696662596331"></p><p><img src="'+en+'" alt="1696662739064"></p><p>上面就演示了如何导入和导出。再看一下导出，如下：</p><p><img src="'+on+'" alt="1696662805274"></p><p>再看一下导入，如下：</p><p><img src="'+cn+'" alt="1696662927189"></p><p>再尝试导入b.js中的标识符，如下：</p><p><img src="'+ln+'" alt="1696662961166"></p><p><img src="'+un+'" alt="1696663035515"></p><p>针对导出，还可以批量导出，如下：</p><p><img src="'+rn+'" alt="1696663277754"></p><p>可以把多个模块放到一个文件夹，如下：</p><p><img src="'+dn+'" alt="1696663413035"></p><p><img src="'+mn+'" alt="1696663455093"></p><p>相当于tools文件夹，下面有两个模块，在另外一个模块中，就可以使用上在的模块了，如下：</p><p><img src="'+kn+'" alt="1696663596099"></p><p>但是这样写，有点模块，我们可以在文件夹下面，创建一个文件，如下：</p><p><img src="'+gn+'" alt="1696663899230"></p><p>导入使用之，如下：</p><p><img src="'+vn+'" alt="1696663939208"></p><p>也就是说，在一个文件夹下面创建了一个index.js，在index.js中导入标识符，再直接导出去，这种写法，有一个简写，如下：</p><p><img src="'+bn+'" alt="1696664066344"></p><p>上面的代码还可以简写，如下：</p><p><img src="'+_n+'" alt="1696664141853"></p><p>针对导出，上面讲的是export导出的，导出的是标识符，还有一个导出的方式，叫exprot default。如果一个模块中，只有一个数据时，可以使用exprot default，叫默认导出，如果一个模块中，有非常多的标识符，都需要导出，建议使用epxort。如下：</p><p><img src="'+fn+'" alt="1696664373319"></p><p>批量导出，如下：</p><p><img src="'+hn+'" alt="1696664424300"></p><p>如果说我们就打算打出一个标识符，可以使用默认导出，如下：</p><p><img src="'+wn+'" alt="1696664665863"></p><p>如果是导入多个数据，要使用epxrot，如下：</p><p><img src="'+xn+'" alt="1696664723073"></p><p>导入，如下：</p><p><img src="'+yn+'" alt="1696664786904"></p><h3 id="_5-import函数" tabindex="-1"><a class="header-anchor" href="#_5-import函数" aria-hidden="true">#</a> 5，import函数</h3><p>准备一个模块如下 ：</p><p><img src="'+qn+'" alt="1696665817150"></p><p>在main.js中导入之，如下：</p><p><img src="'+jn+'" alt="1696665867333"></p><p>有一个需求，如果满足某个条件了，再进行导入，如下：</p><p><img src="'+Sn+'" alt="1696665989216"></p><p>如何解决？答：import函数。如下：</p><p><img src="'+Nn+'" alt="1696666164236"></p><p>还可以使用async + await，如下：</p><p><img src="'+Dn+'" alt="1696666282822"></p><h2 id="三-包管理" tabindex="-1"><a class="header-anchor" href="#三-包管理" aria-hidden="true">#</a> 三，包管理</h2><h3 id="_1-什么是包管理工具" tabindex="-1"><a class="header-anchor" href="#_1-什么是包管理工具" aria-hidden="true">#</a> 1，什么是包管理工具</h3><p>上在的演示的模块都是自定义模块，除了自定义模块，还有系统模块和第三方模块，系统模块我们先不讲。现在我们研究一下第三方模块，第三方模块都是一些大牛开发的模块，会放到网上，我们使用时，需要下载，通过放在npm网上，如下：</p><p><img src="'+Jn+'" alt="1696666490736"></p><p>在下载第三方模块，需要使用npm下载工具。这个工具，你在安装node时，就安装好了。npm叫Node Package Manager，就是包管理工具。通过 NPM 可以对 Node 的工具包进行搜索、下载、安装、删除、上传。通过where npm就可以查看你的npm安装在哪里，如下：</p><p><img src="'+Tn+`" alt="1696666682799"></p><h3 id="_2-初始化配置文件" tabindex="-1"><a class="header-anchor" href="#_2-初始化配置文件" aria-hidden="true">#</a> 2，初始化配置文件</h3><p>一个项目，有非常多的包，我们需要通过一个配置文件（package.json）来管理这些包，配置文件会记录着你项目的名称、版本号、项目描述，项目所依赖的其他库的信息和依赖库的版本号，可以生成配置文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm init -y    # -y 表示所有选项都采用默认，如果不写 -y 则里面的选项需要自己手动输入
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码演示：</p><p><img src="`+Mn+'" alt="1696667249399"></p><p>一个项目，可以有N个第三方模块，我们需要生成一个配置文件，去记录这些第三方模块。你在安装第三方依赖时，它会生成一个叫package.json文件，这个文件，就是项目的配置文件。它里面记录了，项目所用到的依赖。如下：生成的package.json，如下：</p><p><img src="'+Cn+`" alt="1696667268809"></p><p>有了package.json后，后面就可以安装第三方模块，下载的第三方依赖都会放到node_module文件夹下，如下：</p><p>安装命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install vue    -- install 可以简写成 i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装的依赖有很多版本，默认安装是最新版，代码演示：</p><p><img src="`+En+'" alt="1696667339318"></p><p>当执行npm init -y时，需要注意，如下：</p><p><img src="'+Pn+`" alt="1696667476053"></p><p>总结一个package.json文件，如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodetest&quot;</span><span class="token punctuation">,</span>      #包的名字(注意生成的包名不能使用中文，大写 ！！！ 不能使用 npm 作为包的名字)
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>   #包的版本
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>    #包的描述
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>   #包的入口文件
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>			#脚本配置
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>			#作者
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>		#版权声明
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更加详细的配置：</p><ul><li>name是项目的名称，必填</li><li>version是当前项目的版本号，必填</li><li>description是描述信息，很多时候是作为项目的基本描述</li><li>author是作者相关信息（发布时用到）</li><li>license是开源协议（发布时用到） <ul><li>http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html(关于开源证书扩展阅读)</li></ul></li><li>private属性记录当前的项目是否是私有的，当值为true时，npm是不能发布它的，这是防止私有项目或模块发布出去的方式</li><li>main属性，设置程序的入口，实际上是找到对应的main属性查找文件的</li><li>scripts属性用于配置一些脚本命令，以键值对的形式存在，配置后我们可以通过 npm run 命令的key来执行这个命令 <ul><li>npm start和npm run start 它们是等价的，对于常用的 start、 test、stop、restart可以省略掉run直接通过 npm start等方式运行；</li></ul></li><li>dependencies属性 <ul><li>dependencies属性是指定无论开发环境还是生成环境都需要依赖的包</li><li>项目实际开发用到的一些库模块vue、vuex、vue-router、react、react-dom、axios等</li></ul></li><li>devDependencies属性 <ul><li>在生成环境是不需要的，比如webpack、babel等</li><li>通过 npm install webpack --save-dev，将它安装到devDependencies属性中</li></ul></li></ul><p>版本：</p><ul><li>X主版本号（major）：当你做了不兼容的 API 修改（可能不兼容之前的版本）</li><li>Y次版本号（minor）：当你做了向下兼容的功能性新增（新功能增加，但是兼容之前的版本）</li><li>Z修订号（patch）：当你做了向下兼容的问题修正（没有新功能，修复了之前版本的bug）</li><li>x.y.z：表示一个明确的版本号</li><li>^x.y.z：表示x是保持不变的，y和z永远安装最新的版本</li><li>~x.y.z：表示x和y保持不变的，z永远安装最新的版本</li><li>package-lock.json 是包版本的锁文件，专门来固定包的版本的，不要手动修改</li></ul><h3 id="_3-换源" tabindex="-1"><a class="header-anchor" href="#_3-换源" aria-hidden="true">#</a> 3，换源</h3><p>默认情况下，你安装的第三方依赖，是去国外下载的，速度比较慢，并且容易被墙掉，说白了就是安装不成功。我们可以把下载源换成国内下载源，通过一个工具，叫nrm来实现换源，所以现在我们需要安装一个nrm工具，通过npm i xxx -g。 -g表示全局安装，全局安装就是以工具的形式安装。说白了，安装完后，就可以使用这个工具了。</p><p>先安装一下，如下：</p><p><img src="`+In+'" alt="1696669205001"></p><p>通过nrm ls查看都有哪些下载源，如下：</p><p><img src="'+zn+'" alt="1696669290817"></p><p>上面的taobao就是国内的下载源，可以换源，如下：</p><p><img src="'+Bn+`" alt="1696669344688"></p><h3 id="_4-全局安装-工具-和局部安装" tabindex="-1"><a class="header-anchor" href="#_4-全局安装-工具-和局部安装" aria-hidden="true">#</a> 4，全局安装（工具）和局部安装</h3><p>上面已经把下载源换成了国内的下载源。开始安装依赖，安装分全局安装和局部安装。</p><p><strong>全局安装：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install 工具名称(nrm) -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码演示：</p><p><img src="`+On+'" alt="1696669500914"></p><p><img src="'+An+'" alt="1696669527831"></p><p><strong>局部安装</strong></p><p>局部安装，就是不加-g，项目中用到的依赖，需要局部安装。</p><p>依赖分两类：</p><ul><li>生产依赖(写代码用到的依赖) <ul><li>npm i xxx</li><li>npm i xxx -S -S 表示安装成生成依赖</li><li>npm i xxx --save --save 表示安装成生成依赖</li></ul></li><li>开发依赖 <ul><li>npm i xxx -D -D 表示安装成开发依赖</li><li>npm i xxx --save-dev --save-dev 表示安装成开发依赖</li></ul></li></ul><p>代码演示：</p><p><img src="'+Fn+'" alt="1696669837741"></p><p><img src="'+Vn+'" alt="1696669888698"></p><p><img src="'+Gn+'" alt="1696669969370"></p><p>跑环境，把项目发给别人，一般是不会发node_modules中，这个node_modules在我电脑上没有问题，在你电脑可以有问题，并且这个文件夹，里在文件非常多，copy的话，很容易出问题。你拿到代码后，你需要安装项目中所需要的依赖，通过一个命令，叫npm i就可以把所有的依赖都安装了，这个过程叫跑环境，如下：</p><p><img src="'+Kn+'" alt="1696670496053"></p><p>总结：</p><ul><li>不管是生成依赖还是开发依赖，安装的依赖都会放在node_module文件夹下面</li><li>全局安装是把这个依赖当成工具，如：npm i cnpm -g 中的cnpm就是一个工具</li><li>局部安装分开发依赖和生产依赖</li><li>npm install(i) axios -- 默认安装生产依赖</li><li>npm insatll(i) axios --save --生产依赖</li><li>npm install(i) axios -S --生产依赖</li><li>npm install(i) axios --save-dev --开发依赖</li><li>npm install(i) axios -D --开发依赖</li><li>npm install(i) --安装package.json中的 依赖包（跑环境）</li><li>npm install(i) --production --只安装dependencies中的依赖</li><li>npm uninstall axios --删除某个依赖</li><li>npm uninstall axios -S --删除生产依赖</li><li>npm search(s) axios --搜索依赖</li><li>npm cache clean --清除缓存</li></ul><h3 id="_5-cnpm-和-yarn" tabindex="-1"><a class="header-anchor" href="#_5-cnpm-和-yarn" aria-hidden="true">#</a> 5，cnpm 和 yarn</h3><p>npm工具，是我们在安装node时，就已经安装好了，npm这个工具，叫下载工具，就是用来下载一些第三方依赖。除了npm这个下载工具之外，还有一个下载工具：</p><ul><li>cnpm</li><li>yarn</li><li>pnpm</li></ul><p><strong>yarn</strong></p><ul><li>yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具</li><li>早期的npm存在很多的缺陷，比如安装依赖速度很慢、版本依赖混乱等等一系列的问题</li><li>从npm5版本开始，进行了很多的升级和改进，但是依然很多人喜欢使用yarn</li><li>yarn 安装 npm install yarn -g</li><li>yarn 修改仓库地址 yarn config set registry https://registry.npm.taobao.org</li><li>yarn相关的命令： <ul><li>yarn --version 检测是否安装成功</li><li>yarn init 初始化，生成package.json</li><li>yarn global add package 全局安装</li><li>yarn global remove less 全局删除</li><li>yarn add package 局部安装</li><li>yarn add package --dev (相当于npm中的-D)</li><li>yarn remove package 删除局部包文件</li><li>yarn 安装package.json中的所有依赖</li><li>yarn info packageName 获取包的有关信息 几乎不用</li></ul></li></ul><p><strong>cnpm</strong></p><ul><li>npm install -g cnpm</li><li>cnpm 相关的命令和npm命令基本上是一样的</li></ul><p><strong>pnpm</strong></p><ul><li>后面大家自学</li></ul><h3 id="_6-发包" tabindex="-1"><a class="header-anchor" href="#_6-发包" aria-hidden="true">#</a> 6，发包</h3><p>所谓的发包，就是你开发一个很NB依赖，上传到npm官网，让别人使用。流程如下：</p><p>1.修改为官方的地址( npm config set registry https://registry.npmjs.org/ 也可以通过nrm)</p><p><img src="'+Xn+'" alt="1696671442101"></p><ol start="2"><li>创建文件夹，并创建文件index.js，在文件中声明函数，使用module.export暴露</li></ol><p><img src="'+Yn+'" alt="1696671567852"></p><p><img src="'+Zn+'" alt="1696671593843"></p><p><img src="'+Hn+'" alt="1696671639541"></p><ol start="3"><li>npm 初始化工具包，package.json填写包的信息</li></ol><p><img src="'+Ln+'" alt="1696671708298"></p><ol start="4"><li>账号npm注册（激活账号），完成邮箱验证</li></ol><p><img src="'+Qn+'" alt="1696671793696"></p><ol start="5"><li>命令行下『npm login』 填写相关用户信息 (一定要在包的文件夹下运行)</li></ol><p><img src="'+Rn+'" alt="1696672184508"></p><ol start="6"><li>命令行下『 npm publish』 提交包 👌</li></ol><p><img src="'+Un+'" alt="1696672232105"></p><ol start="7"><li>npm有垃圾检测机制，如果名字简单或做测试提交，很可能会被拒绝提交，可以尝试改变一下包的名称来解决这个问题</li><li>还可以添加项目的说明文件，如下：</li></ol><p><img src="'+Wn+'" alt="1696672597661"></p>',274),ss=[ns];function as(ts,ps){return s(),a("div",null,ss)}const os=n($n,[["render",as],["__file","08-node，npm，mokuaihua.html.vue"]]);export{os as default};
