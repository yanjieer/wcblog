import{_ as s,o as p,c as t,a}from"./app-3497e3d6.js";const i="/wcblog/assets/1688001100626.0d1f1026-db24d8d8.png",e="/wcblog/assets/1698278442376.065e0feb-17058b12.png",c="/wcblog/assets/1698278573069.6b891745-4449b987.png",g="/wcblog/assets/1698278644465.b77bae5f-25f16415.png",o="/wcblog/assets/1688001607466.afa82c7c-72a3804f.png",r="/wcblog/assets/1688001630667.4fb9bd9c-01432e3d.png",l="/wcblog/assets/1688001718365.7cdf162e-f52de8d4.png",n="/wcblog/assets/1688001727345.d989c883-1702211189869-9505bb61.png",d="/wcblog/assets/1688001744749.fdb15371-1702211271102-81f91185.png",b="/wcblog/assets/1688001782804.b60a7cc3-1702211282034-aadaab65.png",m="/wcblog/assets/1688001927913.6440c18c-1702211310312-e2072f43.png",_="/wcblog/assets/1688002185137.54d64a2a-13aeb0f4.png",h="/wcblog/assets/1688002349065.a8d89c82-3d551875.png",u="/wcblog/assets/1688002471539.fe109574-c0dca0b6.png",f="/wcblog/assets/1688002524718.b2758cc9-7e97fd8f.png",w="/wcblog/assets/1688002637911.48eb9002-fd1ca5d8.png",v="/wcblog/assets/1688002996199.6eb069dc-778fb27e.png",x="/wcblog/assets/1698279511339.c3b8061c-f3933492.png",j="/wcblog/assets/1688003073381.f19867f4-4c5b7e06.png",y="/wcblog/assets/1688003263161.209115a4-ef71ac25.png",G="/wcblog/assets/1688003303198.d73ab49f-80bcfd95.png",q="/wcblog/assets/1688003375905.aba1ecbe-7d16f84f.png",k="/wcblog/assets/1698279700005.2baa3a8d-417fa5f9.png",S="/wcblog/assets/1688003427012.7aa999df-3fc157c8.png",D="/wcblog/assets/1688003535493.54b95559-cce6d564.png",z="/wcblog/assets/1688003628263.cfe69469-abff8e2d.png",V="/wcblog/assets/1688003707428.1e3980c7-28fc540d.png",B="/wcblog/assets/1688003771507.98d1a171-124fb895.png",C="/wcblog/assets/1688003972237.17091ab9-039af2e9.png",H="/wcblog/assets/1688004121078.98a64afd-7629e605.png",R="/wcblog/assets/1688004305661.2e44957c-34c18deb.png",A="/wcblog/assets/1688005363060.cefc0407-d779e049.png",E="/wcblog/assets/1688005492277.43881786-5d362648.png",I="/wcblog/assets/1702212127700-d9b11e92.png",N="/wcblog/assets/1688005689255.1b6dc39b-3800af13.png",U="/wcblog/assets/1688005877658.ad6ff427-d3ad39d8.png",W="/wcblog/assets/1702212215163-d720c1cf.png",L="/wcblog/assets/1688006006034.328a5c96-b67e1d53.png",F="/wcblog/assets/1688006095780.0a8d2070-dac8bb67.png",J="/wcblog/assets/1688006183465.cbc7e5b6-902d04e3.png",K="/wcblog/assets/1688006339947.c52afd0a-858bb235.png",M="/wcblog/assets/1688006503735.7eea00b8-c5a854bb.png",O="/wcblog/assets/1688006573498.e80abd76-fc2102eb.png",P="/wcblog/assets/1702212737337-0867ee5f.png",Q="/wcblog/assets/1688006651846.56a66583-065e2dd5.png",T="/wcblog/assets/1688006702961.adea926a-078fe725.png",X="/wcblog/assets/1702213706655-ea4e9eae.png",Y="/wcblog/assets/1688006875613.b4eda662-4cdb2889.png",Z="/wcblog/assets/1688006906259.c9cf3fa4-1bab53d5.png",$="/wcblog/assets/1688006916078.e72a564a-cc2ce1cf.png",ss="/wcblog/assets/1688006992937.11497a7c-d2cc539b.png",ps="/wcblog/assets/1688007036803.efb33a71-6124739d.png",ts="/wcblog/assets/1688007063112.5b610bbe-3fc7f757.png",as="/wcblog/assets/1688007111965.c385eb68-ccc4f677.png",is="/wcblog/assets/1688007136806.d088ebb5-d4f74b27.png",es="/wcblog/assets/1688007193583.13b1ac23-4cec2ba4.png",cs="/wcblog/assets/1688007247951.9323e046-c29ce2ca.png",gs="/wcblog/assets/1688007338245.73858224-659f786b.png",os="/wcblog/assets/1688007364903.dccd2ca7-d4a67eff.png",rs="/wcblog/assets/1688007504185.95f3515c-7effb660.png",ls="/wcblog/assets/1688007561206.20f970d9-2a7b8e0d.png",ns="/wcblog/assets/1688007615128.5792a74b-92b57098.png",ds="/wcblog/assets/1688007745412.37d6dc09-5c541545.png",bs="/wcblog/assets/1688007795122.09e3380c-bce3edcb.png",ms="/wcblog/assets/1688007966231.45a07053-c97a4851.png",_s="/wcblog/assets/1688008824116.c820ddb2-18833c6d.png",hs="/wcblog/assets/1688008899534.4a56c170-548c9d59.png",us="/wcblog/assets/1688008956232.21077efd-5f7600cd.png",fs="/wcblog/assets/1688008975723.7765ff2b-eab673ac.png",ws="/wcblog/assets/1688009026947.637cb758-9d863f74.png",vs="/wcblog/assets/1688009129889.8907518e-8654d846.png",xs="/wcblog/assets/1688009232768.f58d3ca8-7cf34647.png",js="/wcblog/assets/1688009259328.817bef54-8a635f2e.png",ys="/wcblog/assets/1688009353418.f9de82b5-79c14a17.png",Gs="/wcblog/assets/1688009735826.522cc272-4b3b9cbd.png",qs="/wcblog/assets/1688009858664.7f25643a-ed9c792b.png",ks="/wcblog/assets/1688010060100.a69f0920-119a0283.png",Ss="/wcblog/assets/1688010136459.1108c13a-1702215273304-3ae3ebb2.png",Ds="/wcblog/assets/1688010230504.885dfbc7-19c1b125.png",zs="/wcblog/assets/1688010266517.72577d21-d9daab6e.png",Vs="/wcblog/assets/1688010325890.bc927d8e-c2b150a6.png",Bs="/wcblog/assets/1688010442823.b5a64f50-e44d9a20.png",Cs="/wcblog/assets/1688010466110.adc093b7-e0a35559.png",Hs="/wcblog/assets/1688010500973.9b2e57c7-685d091b.png",Rs="/wcblog/assets/1688010552064.de4c5251-97010835.png",As="/wcblog/assets/1688010627469.02d128c6-786b62f2.png",Es="/wcblog/assets/1688010675915.47f47904-ac2c606c.png",Is="/wcblog/assets/1688010729204.27677c56-2b6b9609.png",Ns="/wcblog/assets/1688010861986.89a6a0da-576ef66b.png",Us="/wcblog/assets/1688010942292.5c23b220-46f59992.png",Ws="/wcblog/assets/1688018794658.1d075030-ee371536.png",Ls="/wcblog/assets/1688019040086.d658e8ab-b661299f.png",Fs="/wcblog/assets/1688019433422.495263a9-345d7e3e.png",Js="/wcblog/assets/1688019473352.5a67c746-6806a4b7.png",Ks="/wcblog/assets/1688019568042.0e9db9a0-34bd9967.png",Ms="/wcblog/assets/1688020257081.0922e522-74769313.png",Os="/wcblog/assets/1688020479533.c411b8fa-71894909.png",Ps="/wcblog/assets/1688020689347.7ae714ae-c9f89c29.png",Qs="/wcblog/assets/1688021738316.64832edd-c46aeafd.png",Ts="/wcblog/assets/1688021884079.0a170b0f-8b51bcf5.png",Xs="/wcblog/assets/1688021913648.ca0cd4b8-2bb58bd4.png",Ys="/wcblog/assets/1688021961465.8a1f0fe3-593ade0f.png",Zs="/wcblog/assets/1688022003785.bf83194a-de95196a.png",$s="/wcblog/assets/1688022029758.feeb38b6-84697c3c.png",sp="/wcblog/assets/1688022058537.affeb36e-d99b9935.png",pp="/wcblog/assets/1702217122353-4bc0f701.png",tp="/wcblog/assets/1688022233644.04e205c3-be89f32e.png",ap="/wcblog/assets/1688022306660.05fc308d-8236d7e6.png",ip="/wcblog/assets/1688022341559.3a000005-c90bdfbe.png",ep="/wcblog/assets/1688022463745.e4b902b0-d4e31833.png",cp="/wcblog/assets/1688022516020.62072216-8054cec6.png",gp="/wcblog/assets/1688022590161.10d81db6-28e0d78e.png",op="/wcblog/assets/1688022610081.a885f093-634435ef.png",rp="/wcblog/assets/1688022626106.00816cd1-5fa69b5e.png",lp="/wcblog/assets/1688022661106.440e37d6-152b2eff.png",np="/wcblog/assets/1688022724266.18b9fde7-1702217347542-562aee78.png",dp="/wcblog/assets/1688022756022.16150060-1702217347541-81583da3.png",bp="/wcblog/assets/1688022801190.33458a26-1702217347541-8cfb6aa3.png",mp="/wcblog/assets/1688022816612.f4e03eb5-107598ec.png",_p="/wcblog/assets/1688022923573.f833f4ea-e62f6d1d.png",hp="/wcblog/assets/1688023230662.0075b003-ed3b758e.png",up="/wcblog/assets/1688023467288.f614b4c8-90ae1535.png",fp="/wcblog/assets/1688023811175.c141c2eb-e37dfbf8.png",wp="/wcblog/assets/1688023850481.3866696a-1702217407994-4429f1c2.png",vp="/wcblog/assets/1702218341100-1eda90f6.png",xp="/wcblog/assets/1688024967079.ed747b86-2adef4b5.png",jp="/wcblog/assets/1688024986161.35cc1a4e-1702217787130-fc9bcf7e.png",yp="/wcblog/assets/1688024008088.7094e3c2-64632769.png",Gp="/wcblog/assets/1688024206792.49984ebc-fca7f2f5.png",qp="/wcblog/assets/1702218643586-e489793e.png",kp="/wcblog/assets/1702218869676-24ab3821.png",Sp="/wcblog/assets/1688024497610.ef2cbc9b-ae9b6af0.png",Dp="/wcblog/assets/1688025280456.768a214f-1702218484996-6a928040.png",zp="/wcblog/assets/1688025935467.2eea61bf-57f7e2c3.png",Vp="/wcblog/assets/1688025971846.83a2bf11-1702219319834-fd39e947.png",Bp="/wcblog/assets/1702219609613-617111c5.png",Cp="/wcblog/assets/1688026085189.d5fe6b2b-af7abc55.png",Hp="/wcblog/assets/1688026103004.93f8ae10-1702219697721-67d99eb8.png",Rp="/wcblog/assets/1688026185020.c9248f4f-1702219697587-7ee74bd0.png",Ap="/wcblog/assets/1688026204174.638ffeab-1702219723295-2137e7ab.png",Ep="/wcblog/assets/1688026227732.7a42ea59-874f8805.png",Ip="/wcblog/assets/1688026311153.ff989158-23f062b3.png",Np="/wcblog/assets/1688026422838.9200ea57-f2bcb6fa.png",Up="/wcblog/assets/1688026456140.89d1a7d5-4d65ee06.png",Wp="/wcblog/assets/1702219932183-d1a572d5.png",Lp="/wcblog/assets/1688027178632.b368a1c3-60375efb.png",Fp="/wcblog/assets/1688027225249.a8ae956d-1fdf8cff.png",Jp="/wcblog/assets/1688027626950.6a11b720-32890301.png",Kp="/wcblog/assets/1688027668908.67ea37f2-d1ff03e2.png",Mp="/wcblog/assets/1688027782829.b9df8c33-7eca1681.png",Op="/wcblog/assets/1688027903626.a9bb5fb6-7dd02caa.png",Pp="/wcblog/assets/1688027965058.00193019-97d095ba.png",Qp="/wcblog/assets/1688028043784.bff16b65-1b089b0b.png",Tp="/wcblog/assets/1688028293084.6e06432b-56abfb55.png",Xp={},Yp=a('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><h2 id="一-什么是git" tabindex="-1"><a class="header-anchor" href="#一-什么是git" aria-hidden="true">#</a> 一，什么是Git</h2><h3 id="_1-什么是git" tabindex="-1"><a class="header-anchor" href="#_1-什么是git" aria-hidden="true">#</a> 1, 什么是Git</h3><p>Git就是一个分布式版本控制软件。考虑在开发中的几个问题。如下：</p><ul><li><strong>第一个问题</strong>：wc负责的模块就要完成了，就在即将提交发布之前的一瞬间，电脑突然蓝屏，硬盘光荣下岗！就意味着wc写的代码就丢失了。</li><li><strong>第二个问题</strong>：wc需要在项目中加入一个很复杂的功能，一边尝试，一边修改代码，就这样摸索了一个星期。 可是这被改得面目全非的代码已经回不到从前了。</li></ul><p>什么是版本控制？你去写论文，可能会出现如何的状态：</p><p><img src="'+i+'" alt="1688001100626"></p><p><strong>第三个问题</strong>：wc和xq从文件服务器下载同一个文件</p><p><strong>第四个问题</strong>：如果项目中的bug过多，需要追溯责任。</p><p>总结在开发项目中，面临的问题：</p><ul><li>代码备份</li><li>版本控制</li><li>协同开发</li><li>责任追溯</li></ul><p>此时，就需要使用到git软件了。<strong>Git</strong> <strong>是目前最流行的分布式版本控制软件</strong></p><h3 id="_2-版本控制分类" tabindex="-1"><a class="header-anchor" href="#_2-版本控制分类" aria-hidden="true">#</a> 2，版本控制分类</h3><p><strong>1）本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS</p><p><img src="'+e+'" alt="1698278442376"></p><p><strong>2）集中版本控制</strong></p><ul><li>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</li><li>用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本</li><li>所有数据都保存在单一的服务器上，如果这个服务器会损坏(有很大的风险), 这样就会丢失所有的数据，需要定期备份</li><li>代表产品：SVN、CVS、VSS</li></ul><p><img src="'+c+'" alt="1698278573069"></p><p><strong>3）分布式版本控制</strong></p><ul><li>所有版本信息仓库全部同步到本地的每个用户</li><li>可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push 到相应的服 务器或其他用户那里。</li><li>每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据</li><li>更加安全不会因为服务器损坏或者网络问题，造成不能工作的情况</li><li>代表软件: Git</li></ul><p><img src="'+g+'" alt="1698278644465"></p><h3 id="_3-git的下载和安装" tabindex="-1"><a class="header-anchor" href="#_3-git的下载和安装" aria-hidden="true">#</a> 3，Git的下载和安装</h3><p>官网下载git软件：https://git-scm.com/downloads</p><p>下载慢，可以到镜像下载 : http://npm.taobao.org/mirrors/git-for-windows/</p><p><img src="'+o+'" alt="1688001607466"></p><p>安装是傻瓜式安装：</p><ul><li>第一步：双击安装包，进入安装界面</li></ul><p><img src="'+r+'" alt="1688001630667"></p><ul><li>第二步：指定安装目录</li></ul><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688001683405.16c2f84c.png" alt="1688001683405"></p><ul><li>第三步：一路next下去</li></ul><p><img src="'+l+'" alt="1688001718365"></p><p><img src="'+n+'" alt="1688001727345"></p><ul><li>第四步：安装完成</li></ul><p><img src="'+d+'" alt="1688001744749"></p><p>安装完成后，在电脑桌面上，右键，可以看到两个菜单，如下：</p><p><img src="'+b+'" alt="1688001782804"></p><p>上面的Git GUI Here表示Git提供的图形界面工具，Git Bash是Git提供的命令行工具（我们使用的）。</p><p>打开Git Bah Here，输入git --version命令，可以查看git软件的版本，如下：</p><p><img src="'+m+'" alt="1688001927913"></p><h3 id="_4-git资料" tabindex="-1"><a class="header-anchor" href="#_4-git资料" aria-hidden="true">#</a> 4，Git资料</h3><p>命令地址: https://gitee.com/all-about-git</p><p>Git 互动学习：https://oschina.gitee.io/learn-git-branching/</p><h2 id="二-git本地仓库的管理" tabindex="-1"><a class="header-anchor" href="#二-git本地仓库的管理" aria-hidden="true">#</a> 二，Git本地仓库的管理</h2><h3 id="_1-生成本地仓库并简单操作" tabindex="-1"><a class="header-anchor" href="#_1-生成本地仓库并简单操作" aria-hidden="true">#</a> 1，生成本地仓库并简单操作</h3><p>wc要开始创业做一个项目，项目叫wcyx。如：</p><p><img src="'+_+'" alt="1688002185137"></p><p>此时我们想让git管理此项目，需要把这个文件夹，初始化成本地仓库(<strong>进入要管理的文件夹</strong>），如下：</p><p><img src="'+h+'" alt="1688002349065"></p><p>初始化本地管理，要使用git管理项目，一定要先初始化，如下：</p><p><img src="'+u+'" alt="1688002471539"></p><p>然后wc就开始项目开发了，如下：</p><p><img src="'+f+'" alt="1688002524718"></p><p>此时就需要让git管理代码，形成一个版本，在形成版本之前，可以使用git status查看代码文件的状态，如下：</p><p><img src="'+w+'" alt="1688002637911"></p><p>先补充一个git本地仓库中有三个区域，如下：</p><p><img src="'+v+'" alt="1688002996199"></p><p>四个区域与之对应关系：</p><ul><li>本地仓库 之 工作目录（Working Directory） <ul><li>工作区，就是你平时存放项目代码的地方</li></ul></li><li>本地仓库 之 暂存区（Stage/Index） <ul><li>暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li></ul></li><li>本地仓库 之 资源库/版本库（Repository或Git Directory） <ul><li>版本库，就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li></ul></li><li>远程仓库（Remote Directory） <ul><li>远程仓库，托管代码的服务器(比如Github/Gitee)，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul></li></ul><p><img src="'+x+'" alt="1698279511339"></p><p>把工作的代码扔到暂存区，如下 ：</p><p><img src="'+j+'" alt="1688003073381"></p><p>然后，把暂存区的内容扔到版本库中，形成版本，在形成版本之前，需要告诉git，你是谁，如果不告诉，会报错，配置如下：</p><p><img src="'+y+'" alt="1688003263161"></p><p>指令成功执行，会生成C:\\Users\\Administrator.gitconfig, 信息如下：</p><p>通过命令（查看所有配置（git config -l / --list））查看之，如下：</p><p><img src="'+G+'" alt="1688003303198"></p><p>然后才能生成版本，如下：</p><p><img src="'+q+'" alt="1688003375905"></p><p>再次强调区域关系：</p><p><img src="'+k+'" alt="1698279700005"></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD只是当前的开发分支(branch)</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li></ul><p>查看版本，如下：</p><p><img src="'+S+'" alt="1688003427012"></p><p>补充相关命令：</p><ul><li>查看所有配置 git config -l 或 git config --list</li><li>查看系统配置 git config --system -l 或 git config --system --list 配置文件在Git\\etc\\gitconfig</li><li>查看当前用记配置 git config --global -l 或 git config --global --list 配置文件在C:\\User\\admin.gitconfig</li></ul><h3 id="_2-拓展新功能并回退到某个版本" tabindex="-1"><a class="header-anchor" href="#_2-拓展新功能并回退到某个版本" aria-hidden="true">#</a> 2，拓展新功能并回退到某个版本</h3><p>假定wc想在项目中新增直播的功能，如下：</p><p><img src="'+D+'" alt="1688003535493"></p><p>然后还是进行本地仓库的操作，形成版本，如下：</p><p><img src="'+z+'" alt="1688003628263"></p><p>项目上线，如下:</p><p><img src="'+V+'" alt="1688003707428"></p><p>现在由于某个原因，直接功能需要下架，需要回到之前版本，现在版本如下：</p><p><img src="'+B+'" alt="1688003771507"></p><p>看图，如下：</p><p><img src="'+C+'" alt="1688003972237"></p><p>现在要回退到V1版本，如下：</p><p><img src="'+H+'" alt="1688004121078"></p><p>现在又由于某个原因，又想上线直播，现在工作区的代码中没有直播功能，可能通过git reflog查看所有的版本。如下：</p><p><img src="'+R+'" alt="1688004305661"></p><p><strong>总结：</strong></p><ul><li>git init 初始化一个本地仓库，要想让git管理代码，必须初始化成一个本地仓库</li><li>git add . 把工作区的代码扔到暂存区，此时并没有形成版本</li><li>git commit -m &#39;xx&#39; 把暂存区的代码扔到的版本库，形成版本</li><li>git log 查看当前版本</li><li>git reflog 查看所有的版本</li><li>git reset --hard &#39;版本号&#39; 回退到某个版本</li></ul><p>完善一下刚才那个图，如下：</p><p><img src="'+A+'" alt="1688005363060"></p><h3 id="_3-分支和冲突解决" tabindex="-1"><a class="header-anchor" href="#_3-分支和冲突解决" aria-hidden="true">#</a> 3，分支和冲突解决</h3><p>现在wc想在项目中集成ddz的功能，这个ddz模块是一个尝试性模块。之前开的版本，都是在主分支上开的，这个主分支，叫master分析，如下：</p><p><img src="'+E+'" alt="1688005492277"></p><p>在vscode中也可以查看，如下：</p><p><img src="'+I+'" alt="1702212127700"></p><p>现在wc想单独创建一个新的环境去开发ddz，此时，wc就可以去创业一个子分支，多个分支就相当于多个环境，彼此是互不影响的，现在去查看分支，如下：</p><p><img src="'+N+'" alt="1688005689255"></p><p>创建一个新分支，如下：</p><p><img src="'+U+'" alt="1688005877658"></p><p>vscode中也能查看，如下：</p><p><img src="'+W+'" alt="1702212215163"></p><p>现在我们写代码都是在dev分支上写的，dev分支上是有之前master分支上的版本的，如下：</p><p><img src="'+L+'" alt="1688006006034"></p><p>现在我们写代码都是在dev分支上写的，是不会影响master分支上的代码的，如下：</p><p><img src="'+F+'" alt="1688006095780"></p><p>开发完成后，形成版本，如下：</p><p><img src="'+J+'" alt="1688006183465"></p><p>要知道，我们上线的代码是master分支上的代码，如下：</p><p><img src="'+K+'" alt="1688006339947"></p><p>现在突然遇到线上bug了，直播模块有bug，需要再开一个bug修复的分支，现在切到master分支，在master分支基本上开一个bug修复分支，如下：</p><p><img src="'+M+'" alt="1688006503735"></p><p>在master分支基本上开一个bug修复分支，如下：</p><p><img src="'+O+'" alt="1688006573498"></p><p>画图如下：</p><p><img src="'+P+'" alt="1702212737337"></p><p>开始修改bug，如下：</p><p><img src="'+Q+'" alt="1688006651846"></p><p>形成一个版本，如下：</p><p><img src="'+T+'" alt="1688006702961"></p><p>画图如下：</p><p><img src="'+X+'" alt="1702213706655"></p><p>需要注意，线上的bug是没有修复的，此时，我们需要把bug分支上的版本合并到master分支，如下：</p><p><img src="'+Y+'" alt="1688006875613"></p><p>此时，线上的master分支代码的bug就被修复了，如下：</p><p><img src="'+Z+'" alt="1688006906259"></p><p><img src="'+$+'" alt="1688006916078"></p><p>画图，如下：</p><p><img src="'+ss+'" alt="1688006992937"></p><p>bug分支修复了，就可以把bug分支删除了，如下：</p><p><img src="'+ps+'" alt="1688007036803"></p><p>画图，如下：</p><p><img src="'+ts+'" alt="1688007063112"></p><p>现在wc还需要回去开发它的ddz模块，如下：</p><p><img src="'+as+'" alt="1688007111965"></p><p>开发代码，如下：</p><p><img src="'+is+'" alt="1688007136806"></p><p>当前的操作都是在dev分支上进行的，形成版本，如下：</p><p><img src="'+es+'" alt="1688007193583"></p><p>画图，如下：</p><p><img src="'+cs+'" alt="1688007247951"></p><p>测试完ddz模块后，发现没有问题，需要合并 到master分支，上线，此时就需要把dev分支合并到master分支了，此时会遇到问题。答：冲突。分析如下：</p><p>在dev分支上，如下：</p><p><img src="'+gs+'" alt="1688007338245"></p><p>在master分支上，如下：</p><p><img src="'+os+'" alt="1688007364903"></p><p>现在把dev分支上的版本合并到master分支上，会产生冲突，因为同一个文件的同一行代码不一样，尝试合并如下：</p><p><img src="'+rs+'" alt="1688007504185"></p><p>查看代码如下：</p><p><img src="'+ls+'" alt="1688007561206"></p><p>需要手动的去修改冲突，如下：</p><p><img src="'+ns+'" alt="1688007615128"></p><p>修改完后，还需要形成版本，如下：</p><p><img src="'+ds+'" alt="1688007745412"></p><p>画图，如下：</p><p><img src="'+bs+'" alt="1688007795122"></p><p>总结：最简单的git工作流，如下：</p><p><img src="'+ms+'" alt="1688007966231"></p><h2 id="三-远程仓库的管理-个人开发" tabindex="-1"><a class="header-anchor" href="#三-远程仓库的管理-个人开发" aria-hidden="true">#</a> 三，远程仓库的管理（个人开发）</h2><p>前面说的一系列操作都是在wc在家中开发的，wc现在有钱了，想租一个办公室办公司，现在对于wc来说，有两个场地。wc就可以借助远程仓库对项目进行管理，如下：</p><p><img src="'+_s+'" alt="1688008824116"></p><h3 id="_1-把家中的代码传送到云端" tabindex="-1"><a class="header-anchor" href="#_1-把家中的代码传送到云端" aria-hidden="true">#</a> 1，把家中的代码传送到云端</h3><p>需要仓库一个远程仓库，如下：</p><p><img src="'+hs+'" alt="1688008899534"></p><p><img src="'+us+'" alt="1688008956232"></p><p>创建的仓库，如下：</p><p><img src="'+fs+'" alt="1688008975723"></p><p>现在远程仓库和本地仓库没有关系，需要让它们关联起来，如下：</p><p><img src="'+ws+'" alt="1688009026947"></p><p>让本地仓库和远程仓库关联起来，如下：</p><p><img src="'+vs+'" alt="1688009129889"></p><p>然后，wc在家中需要把代码推送到远程仓库，如下：</p><p><img src="'+xs+'" alt="1688009232768"></p><p>查看远程仓库，如下：</p><p><img src="'+js+'" alt="1688009259328"></p><h3 id="_2-第一次到公司在新电脑上下载代码" tabindex="-1"><a class="header-anchor" href="#_2-第一次到公司在新电脑上下载代码" aria-hidden="true">#</a> 2，第一次到公司在新电脑上下载代码</h3><p>wc到公司后，在新电脑上，拉远程仓库的代码，如下：</p><p><img src="'+ys+'" alt="1688009353418"></p><p>wc需要把代码克隆下来，如下：</p><p><img src="'+Gs+'" alt="1688009735826"></p><p>克隆下后，查看分支，如下：</p><p><img src="'+qs+'" alt="1688009858664"></p><p>wc在公司中要开发了，操作如下：</p><p><img src="'+ks+'" alt="1688010060100"></p><p>wc就在dev分支上开发项目了，如下：</p><p><img src="'+Ss+'" alt="1688010136459"></p><p>一天过去了，下班了，提交代码到远程仓库，如下：</p><p><img src="'+Ds+'" alt="1688010230504"></p><p>查看远程仓库，如下：</p><p><img src="'+zs+'" alt="1688010266517"></p><h3 id="_3-下班回家继续写代码" tabindex="-1"><a class="header-anchor" href="#_3-下班回家继续写代码" aria-hidden="true">#</a> 3，下班回家继续写代码</h3><p>回家，家的电脑上没有炸金花的代码，如下：</p><p><img src="'+Vs+'" alt="1688010325890"></p><p>在家也是在dev分支上开发，他还需要把远程仓库的炸金化的代码拉下来，如下：</p><p><img src="'+Bs+'" alt="1688010442823"></p><p>查看家中电脑上的代码，如下：</p><p><img src="'+Cs+'" alt="1688010466110"></p><p>继续开发代码，如下：</p><p><img src="'+Hs+'" alt="1688010500973"></p><p>提交代码，如下：</p><p><img src="'+Rs+'" alt="1688010552064"></p><h3 id="_4-第二天到公司继续开发并上线-公司" tabindex="-1"><a class="header-anchor" href="#_4-第二天到公司继续开发并上线-公司" aria-hidden="true">#</a> 4，第二天到公司继续开发并上线（公司）</h3><p>到公司，需要把昨天晚上在家中的写的代码拉下来，如下：</p><p><img src="'+As+'" alt="1688010627469"></p><p>继续开发，如下：</p><p><img src="'+Es+'" alt="1688010675915"></p><p>提交代码，如下：</p><p><img src="'+Is+'" alt="1688010729204"></p><p>看远程仓库，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688010758416.8a527d44.png" alt="1688010758416"></p><p>今天晚上，在公司，项目要上线了，要加班了，需要把dev分支合并到master分支，上线，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688010839096.789d55cf.png" alt="1688010839096"></p><p>看远程仓库，如下：</p><p><img src="'+Ns+'" alt="1688010861986"></p><p>部署上线，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688010908300.628f7986.png" alt="1688010908300"></p><p>访问之，如下：</p><p><img src="'+Us+'" alt="1688010942292"></p><h3 id="_5-第二天夜里开发一个模块忘记提交代码-公司" tabindex="-1"><a class="header-anchor" href="#_5-第二天夜里开发一个模块忘记提交代码-公司" aria-hidden="true">#</a> 5，第二天夜里开发一个模块忘记提交代码（公司）</h3><p>项目上线了，wc又打算开发了一个新功能，切换分支如下：</p><p><img src="'+Ws+'" alt="1688018794658"></p><p>拉代码，如下：</p><p><img src="'+Ls+'" alt="1688019040086"></p><p>在公司编写代码如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688018916515.69e359dc.png" alt="1688018916515"></p><p>提交代码，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688019234695.84a8f1e7.png" alt="1688019234695"></p><p>然后就回家了。</p><h3 id="_6-到家后-睡不着-想继续写代码" tabindex="-1"><a class="header-anchor" href="#_6-到家后-睡不着-想继续写代码" aria-hidden="true">#</a> 6，到家后，睡不着，想继续写代码</h3><p>到家后，睡不着，想继续写代码，要知道，在公司写的最后一个版本的代码并没有推送到远程仓库。此时他应该怎么办？</p><p>答：此时，可以做一些其它功能的开发。</p><p>到家了，打开家里的电脑，先pull一下，然后切到dev分支，如下：</p><p><img src="'+Fs+'" alt="1688019433422"></p><p>代码如下：</p><p><img src="'+Js+'" alt="1688019473352"></p><p>此时，可以做一些其它模块的开发，如下：</p><p><img src="'+Ks+'" alt="1688019568042"></p><p>开始提交代码，准备睡觉，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688019644580.9ae5e483.png" alt="1688019644580"></p><p>看远程仓库，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688019680094.4bcf4e07.png" alt="1688019680094"></p><p>睡了。</p><h3 id="_7-第三天-到公司还要写代码" tabindex="-1"><a class="header-anchor" href="#_7-第三天-到公司还要写代码" aria-hidden="true">#</a> 7，第三天，到公司还要写代码</h3><p>先看远程仓库，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688019739933.1ac35f43.png" alt="1688019739933"></p><p>再看公司的本地仓库，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688019778724.4e81b5e1.png" alt="1688019778724"></p><p>开始拉代码，把昨天夜里写的代码拉到本地，合并，合并时，就可能产生冲突。如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688019900690.555e613a.png" alt="1688019900690"></p><p>通过vscode手动解决冲突，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688019995330.9dd288a1.png" alt="1688019995330"></p><p>解决如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688020062051.f05514d3.png" alt="1688020062051"></p><p>解决完后，形成一个版本，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688020111304.c272f9c4.png" alt="1688020111304"></p><p>看远程仓库，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688020146041.31824aab.png" alt="1688020146041"></p><p>第三天，wc摸鱼了一天。就回家了。</p><h3 id="_8-第三天晚上要继续写代码" tabindex="-1"><a class="header-anchor" href="#_8-第三天晚上要继续写代码" aria-hidden="true">#</a> 8，第三天晚上要继续写代码</h3><p>到家后，要继续写代码，先pull一下，如下：</p><p><img src="'+Ms+`" alt="1688020257081"></p><p>然后....</p><ul><li>补充一个命令</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  git pull origin dev 
  等价于
  git fetch origin dev
  git merge origin/dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>画图总结：</p><p><img src="`+Os+'" alt="1688020479533"></p><p>再去补充一个命令，如下：</p><p><img src="'+Ps+'" alt="1688020689347"></p><h2 id="四-团队协作开发-多人开发" tabindex="-1"><a class="header-anchor" href="#四-团队协作开发-多人开发" aria-hidden="true">#</a> 四，团队协作开发（多人开发）</h2><h3 id="_1-git的工作流" tabindex="-1"><a class="header-anchor" href="#_1-git的工作流" aria-hidden="true">#</a> 1，git的工作流</h3><p>同于项目比较好，也赚到钱了，wc需要招人继续开发其它项目（新项目），此时就进入到多人协作开发的模式。git工作流，如下：</p><p><img src="'+Qs+'" alt="1688021738316"></p><h3 id="_2-创建项目并邀请成员" tabindex="-1"><a class="header-anchor" href="#_2-创建项目并邀请成员" aria-hidden="true">#</a> 2，创建项目并邀请成员</h3><p>创建组织如下：</p><p><img src="'+Ts+'" alt="1688021884079"></p><p><img src="'+Xs+'" alt="1688021913648"></p><p><img src="'+Ys+'" alt="1688021961465"></p><p>在组件下面，可以创建N个仓库，如下：</p><p><img src="'+Zs+'" alt="1688022003785"></p><p><img src="'+$s+'" alt="1688022029758"></p><p><img src="'+sp+'" alt="1688022058537"></p><p>现此，我们需要邀请xq加入组织，如下：</p><p><img src="'+pp+'" alt="1702217122353"></p><p><img src="'+tp+'" alt="1688022233644"></p><p><img src="'+ap+'" alt="1688022306660"></p><p>现在有两个开发者，如下：</p><p><img src="'+ip+'" alt="1688022341559"></p><h3 id="_3-组长初始化项目和dev分支" tabindex="-1"><a class="header-anchor" href="#_3-组长初始化项目和dev分支" aria-hidden="true">#</a> 3，组长初始化项目和dev分支</h3><p>组长先去克隆远程仓库，如下：</p><p><img src="'+ep+'" alt="1688022463745"></p><p>开始初始化项目，配置项目，如下：</p><p><img src="'+cp+'" alt="1688022516020"></p><p>提交代码，如下：</p><p><img src="'+gp+'" alt="1688022590161"></p><p>当前在master分支上就有一个版本了，如下 ：</p><p><img src="'+op+'" alt="1688022610081"></p><p>看远程仓库，如下：</p><p><img src="'+rp+'" alt="1688022626106"></p><p>看图，如下：</p><p><img src="'+lp+'" alt="1688022661106"></p><p>开一个dev分支，写一个基础模块，如下：</p><p><img src="'+np+'" alt="1688022724266"></p><p>开始开发项目，如下：</p><p><img src="'+dp+'" alt="1688022756022"></p><p>提交代码如下：</p><p><img src="'+bp+'" alt="1688022801190"></p><p>看图，如下：</p><p><img src="'+mp+'" alt="1688022816612"></p><h3 id="_4-小强加入开发" tabindex="-1"><a class="header-anchor" href="#_4-小强加入开发" aria-hidden="true">#</a> 4，小强加入开发</h3><p>小强先需要克隆代码，如下：</p><p><img src="'+_p+'" alt="1688022923573"></p><p>小强需要开一个xq的分支，在xq的分支上，如下：</p><p><img src="'+hp+'" alt="1688023230662"></p><p>开始开发，先 <code>git add .</code> ，然后进行如下的操作，如下：</p><p><img src="'+up+'" alt="1688023467288"></p><p>需要把代码提交到远程仓库，如下：</p><p><img src="'+fp+'" alt="1688023811175"></p><p>看一下远程仓库，如下：</p><p><img src="'+wp+'" alt="1688023850481"></p><p>看图，如下：</p><p><img src="'+vp+'" alt="1702218341100"></p><h3 id="_5-小强申请合并xq分支到dev分支" tabindex="-1"><a class="header-anchor" href="#_5-小强申请合并xq分支到dev分支" aria-hidden="true">#</a> 5，小强申请合并xq分支到dev分支</h3><p>xq分支的代码如下：</p><p><img src="'+xp+'" alt="1688024967079"></p><p>dev分支如下：</p><p><img src="'+jp+'" alt="1688024986161"></p><p>在小强提出申请之前，配置如下，配置的目的是，防止小强恶意合并，如下：</p><p><img src="'+yp+'" alt="1688024008088"></p><p><img src="'+Gp+'" alt="1688024206792"></p><p>小强需要提出code review申请，如下：</p><p><img src="'+qp+'" alt="1702218643586"></p><p><img src="'+kp+'" alt="1702218869676"></p><p>管理员同意申请，如下：</p><p><img src="'+Sp+'" alt="1688024497610"></p><p>合并时就有冲突，需要解决冲突。原因，如下：</p><p><img src="'+Dp+'" alt="1688025280456"></p><p>小强解决：</p><p>答：在xq分支上marge一个dev分支，有冲突，需要解决冲突。再提交代码。远程仓库代码如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688025719501.464f2f72.png" alt="1688025719501"></p><p>还需要把xq分支合并到dev分支，wc查看pr如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688025808421.11b6f8f2.png" alt="1688025808421"></p><p>查看dev分支，如下：</p><p><img src="https://yujingbo1023.github.io/javablog/public/assets/img/1688025881904.f4d0bbac.png" alt="1688025881904"></p><h3 id="_7-wc拉代码-检查代码" tabindex="-1"><a class="header-anchor" href="#_7-wc拉代码-检查代码" aria-hidden="true">#</a> 7，wc拉代码，检查代码</h3><p><img src="'+zp+'" alt="1688025935467"></p><p>得到了xq的写功能模块，代码如下：</p><p><img src="'+Vp+'" alt="1688025971846"></p><p>继续看图，如下：</p><p><img src="'+Bp+'" alt="1702219609613"></p><h3 id="_8-把dev分支上的代码合并到master分支" tabindex="-1"><a class="header-anchor" href="#_8-把dev分支上的代码合并到master分支" aria-hidden="true">#</a> 8，把dev分支上的代码合并到master分支</h3><p><img src="'+Cp+'" alt="1688026085189"></p><p>查看代码如下：</p><p><img src="'+Hp+'" alt="1688026103004"></p><p>提交代码，如下：</p><p><img src="'+Rp+'" alt="1688026185020"></p><p>看远程仓库，如下：</p><p><img src="'+Ap+'" alt="1688026204174"></p><p>部署上线，如下：</p><p><img src="'+Ep+'" alt="1688026227732"></p><h3 id="_9-给master分支打tag" tabindex="-1"><a class="header-anchor" href="#_9-给master分支打tag" aria-hidden="true">#</a> 9，给master分支打tag</h3><p>什么是tag：</p><p><img src="'+Ip+'" alt="1688026311153"></p><p>开始打tag，如下：</p><p><img src="'+Np+'" alt="1688026422838"></p><p>查看远程仓库，如下：</p><p><img src="'+Up+`" alt="1688026456140"></p><p>公司的运维人员，就可以去下载代码上线了。如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone -b v1.0 地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-总结提测预发布" tabindex="-1"><a class="header-anchor" href="#_10-总结提测预发布" aria-hidden="true">#</a> 10，总结提测预发布</h3><p>功能都是在dev分支上开发，如下：</p><p><img src="`+Wp+`" alt="1702219932183"></p><p><strong>公司的团队leader可以执行如下的步骤：</strong></p><p>第一步：基于dev分支创建一个release分支</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout dev
git checkout -b release  #  创建分支并切换
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：测试</p><p>第三步：合并到master分支</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>使用pull request
或
本地将release合并到master分支
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第四步：在master分支上打tag</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git tag -a v1 -m &#39;第一版：直播功能&#39;
git push origin --tags
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第五步：运维人员就可以下载代码上线了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone  -b v1 地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五-其它" tabindex="-1"><a class="header-anchor" href="#五-其它" aria-hidden="true">#</a> 五，其它</h2><h3 id="_1-给开源软件贡献代码" tabindex="-1"><a class="header-anchor" href="#_1-给开源软件贡献代码" aria-hidden="true">#</a> 1，给开源软件贡献代码</h3><p>第一步：fork源码，将别人的源代码拷贝到自己的仓库</p><p><img src="`+Lp+'" alt="1688027178632"></p><p><img src="'+Fp+`" alt="1688027225249"></p><p>第二步：在自己仓库进行代码修改</p><p>第三步：给源代码的作者提交（pull request）</p><h3 id="_2-免密登录" tabindex="-1"><a class="header-anchor" href="#_2-免密登录" aria-hidden="true">#</a> 2，免密登录</h3><p>方式一：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>之前：https://gitee.com/tubie/layui-vue.git
之前：git remote add origin https://gitee.com/tubie/layui-vue.git

要想免密登录，修改url,如下：
https://用户名:密码@gitee.com/tubie/layui-vue.git
现在关联：git remote add origin https://用户名:密码@gitee.com/tubie/layui-vue.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><p><img src="`+Jp+'" alt="1688027626950"></p><p><img src="'+Kp+'" alt="1688027668908"></p><p>方式三：使用ssh实现（推荐）</p><p>参考：https://blog.csdn.net/weixin_51080921/article/details/123550636</p><p>如果要使用ssh免密登录，需要走git协议，如下：</p><p><img src="'+Mp+'" alt="1688027782829"></p><h3 id="_3-git忽略文件" tabindex="-1"><a class="header-anchor" href="#_3-git忽略文件" aria-hidden="true">#</a> 3，git忽略文件</h3><p>有些文件，不想让git进行管理，创建一个.gitignore，如下：</p><p><img src="'+Op+'" alt="1688027903626"></p><p>这个文件也很重要。更多参考：https://github.com/github/gitignore</p><p><img src="'+Pp+'" alt="1688027965058"></p><p><img src="'+Qp+'" alt="1688028043784"></p><h3 id="_4-issues" tabindex="-1"><a class="header-anchor" href="#_4-issues" aria-hidden="true">#</a> 4，issues</h3><p>文档以及任务管理。如下：</p><p><img src="'+Tp+'" alt="1688028293084"></p><h3 id="_5-wiki" tabindex="-1"><a class="header-anchor" href="#_5-wiki" aria-hidden="true">#</a> 5，wiki</h3><p>项目的文档。</p>',414),Zp=[Yp];function $p(st,pt){return p(),t("div",null,Zp)}const at=s(Xp,[["render",$p],["__file","20-Git.html.vue"]]);export{at as default};
