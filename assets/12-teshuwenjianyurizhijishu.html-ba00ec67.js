import{_ as n,o as s,c as a,a as t}from"./app-3497e3d6.js";const p="/wcblog/assets/1701743378378.ffa32e90-192de8d7.png",e="/wcblog/assets/1704115835441-6359e6b3.png",c="/wcblog/assets/1701743463320.d8ffba83-3463e9ba.png",o="/wcblog/assets/1704153970728-8bc79832.png",l="/wcblog/assets/1704154414021-1656ad49.png",i="/wcblog/assets/1704155071446-2961e6a4.png",u="/wcblog/assets/1704155306279-1cfd2d6d.png",k="/wcblog/assets/1704156329212-e3d9934c.png",r="/wcblog/assets/1704156306480-d289a04f.png",d={},m=t(`<h1 id="特殊文件与日志技术" tabindex="-1"><a class="header-anchor" href="#特殊文件与日志技术" aria-hidden="true">#</a> 特殊文件与日志技术</h1><h2 id="一-属性文件" tabindex="-1"><a class="header-anchor" href="#一-属性文件" aria-hidden="true">#</a> 一，属性文件</h2><h3 id="_1-特殊文件概述" tabindex="-1"><a class="header-anchor" href="#_1-特殊文件概述" aria-hidden="true">#</a> 1，特殊文件概述</h3><p>前面学习的IO流是用来读写文件中的数据的，但是我们接触到的文件都是普通的文本文件，普通的文本文件里面的数据是没有任何格式规范的，用户可以随意编写。这种普通文件不方便程序对文件中的数据信息处理。</p><p>在以后的Java开发过程中还会遇到一些特殊的文本文件，这些文件是有一些格式要求的，方便程序对文件中的数据进行处理。比如，后面会用到两种特殊的文本文件，一种是properties文件，还有一种是xml文件。</p><p>properties文件和xml文件介绍：</p><ul><li>后缀为.properties的文件，称之为属性文件，它可以很方便的储存一些类似于键值对的数据。经常当作软件的配置文件使用。</li><li>XML文件能够表示更加复杂的数据关系，比如要表示多个用户的用户名、密码、家乡、性别等。在后面也经常当作软件的配置文件使用。</li></ul><p>对于上面两种特殊文件的学习，只需要把握住三点：</p><ul><li>特殊文件的结构特点</li><li>如何读取它里面的数据</li><li>如何把程数据写到特殊文件中</li></ul><h3 id="_2-properties属性文件" tabindex="-1"><a class="header-anchor" href="#_2-properties属性文件" aria-hidden="true">#</a> 2，Properties属性文件</h3><p>属性文件的格式：</p><ul><li>属性文件后缀以<code>.properties</code>结尾</li><li>属性文件里面每一行都是一个键值对，键和值中间用”=“隔开。比如：admin=123456</li><li><code>#</code>表示注解信息，用来解释这一行配置是什么意思</li><li>每一行末尾不要习惯性加分号，以及空格等字符；不然会把分号，空格当成值的一部分</li></ul><p>演示如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 表示注释</span>
<span class="token comment"># 表示用户名</span>
<span class="token key attr-name">admin</span><span class="token punctuation">=</span><span class="token value attr-value">wangcai</span>
<span class="token comment"># 每一行结束不要加分号也不要加空格等字符，不然可能会当成值的一部分</span>
<span class="token key attr-name">age</span><span class="token punctuation">=</span><span class="token value attr-value">18</span>
<span class="token key attr-name">pwd</span><span class="token punctuation">=</span><span class="token value attr-value">123</span>
<span class="token comment"># 键不能重复</span>
<span class="token comment"># pwd=456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取属性文件中的数据，需要使用Properties，Properties是Map接口下面的一个实现类，所以Properties也是一种双列集合，用来存储键值对。但是一般不会把它当做集合来用。Properties类的对象，用来表示属性文件，可以读取属性文件中的键值对。</p><p>使用Properties读取属性文件中的键值对，需要用到的方法如下：</p><p><img src="`+p+'" alt="1701743378378"></p><p>使用Properties读取属性文件的步骤如下：</p><p>1，创建一个Properties的对象出来(键值对集合，空容器)</p><p>2，调用load(字符输入流/字符输出流)方法，开始加载属性文件中的键值对数据到properties对象中去</p><p>3，调用getProperty(键)方法，根据键取值</p><p>代码演示：</p><p><img src="'+e+`" alt="1704115835441"></p><p>参考代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wangcai<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// .txt  .java  .class  .vue  .wxml   .png   .jpg ...</span>
        <span class="token comment">// .txt</span>
        <span class="token comment">// admin=wangcai pwd=123 age=10</span>

        <span class="token comment">// 在Java中它帮我们提供一些特殊的文件，如：properties   xml(html文件)</span>

        <span class="token comment">// properties文件  叫属性文件  后缀是.priperties  存储的数据类似键值对，通常会作为项目的配置文件shiyong</span>
        <span class="token comment">// xml文件  通常会作为项目的配置文件使用  很早之前，前后端通信也会使用到xml格式的文件</span>

        <span class="token comment">// 创建一个properties对象</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//空容器</span>

        <span class="token comment">//加载属性文件中的键值对数据到properties这个对象中</span>
        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;day01_code/src/config.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//根据键取值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//遍历全部的键值对</span>
        <span class="token comment">//获取键的集合</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">&quot;===&gt;&quot;</span><span class="token operator">+</span> properties<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        properties<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">&quot;===&gt;&quot;</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Properties往属性文件中写键值对，需要用到如下的方法：</p><p><img src="`+c+'" alt="1701743463320"></p><p>往Properties属性文件中写键值对的步骤如下：</p><p>1，先准备一个.properties属性文件，按照格式写几个价值对</p><p>2，创建Properties对象出来</p><p>3，调用setProperty存储一些键值对数据</p><p>4，调用store(字符数输出流/字节输出流，注释)，将集合Properties集合中的键值对和值写到文件中。注意：第二个参数是注释，必须得加</p><p>先准备一个config.properties，如下：</p><p><img src="'+o+'" alt="1704153970728"></p><p>写入键值对，代码演示：</p><p><img src="'+l+`" alt="1704154414021"></p><p>参考代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wangcai<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//空容器</span>

        <span class="token comment">//通过setProperty存储一些数据到properties</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;wangcai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;pwd&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//调用store方法，将properties集合中的键值对写到文件中</span>
        <span class="token comment">//第二个参数是注释，必须要加</span>
        properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;day01_code/src/config.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;save user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-xml文件" tabindex="-1"><a class="header-anchor" href="#二-xml文件" aria-hidden="true">#</a> 二，XML文件</h2><h3 id="_1-什么是xml文件" tabindex="-1"><a class="header-anchor" href="#_1-什么是xml文件" aria-hidden="true">#</a> 1，什么是XML文件</h3><p>XML是扩展的标记语言，意思是它由一些标签组成的，而这些标签是自己定义的。本质上是一种数据格式，可以用来表示复杂的数据关系。</p><p>XML文件有如下的特点：</p><ul><li>XML中的<code>&lt;标签名&gt;</code>称为一个标签或者一个元素，一般是成对出现的</li><li>XML中的标签名可以自己定义(可扩展)，但是必须要使用正确的嵌套</li><li>XML中只能有一个根标签</li><li>XML标签中可以有属性</li><li>XML必须第一行有一个文档声明，格式是固定的<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></li><li>XML文件必须是以.xml为后缀结尾</li></ul><p>先准备一个config.xml如下：</p><p><img src="`+i+'" alt="1704155071446"></p><p>写入标签，代码演示:</p><p><img src="'+u+`" alt="1704155306279"></p><p>参考代码：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>wangcai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">&gt;</span></span>man<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>bj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>xiaoqiang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">&gt;</span></span>women<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>sh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面XML文件中的数据格式是最为常见的，标签有属性、文本、还有合理的嵌套。XML文件中除了写以上数据格式之外，还有一些特殊的字符不能直接写。</p><ul><li>如<code>&lt;,&gt;,&amp;</code>等这些符号不能出现在标签文本中，会和标签格式冲突。如果标签文本中有这些特殊字符，需要用一些占位符代替</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token entity named-entity" title="&amp;">&amp;amp;</span>lt;  表示 <span class="token entity named-entity" title="&lt;">&amp;lt;</span>
<span class="token entity named-entity" title="&amp;">&amp;amp;</span>gt; 表示 &gt;
<span class="token entity named-entity" title="&amp;">&amp;amp;</span>amp; 表示 <span class="token entity named-entity" title="&amp;">&amp;amp;</span>
<span class="token entity named-entity" title="&amp;">&amp;amp;</span>apos; 表示 &#39;
<span class="token entity named-entity" title="&amp;">&amp;amp;</span>quot; 表示 &quot;

<span class="token entity named-entity" title="&lt;">&amp;lt;</span>data&gt;3 <span class="token entity named-entity" title="&amp;">&amp;amp;</span>lt; 2 <span class="token entity named-entity" title="&amp;">&amp;amp;</span>amp;<span class="token entity named-entity" title="&amp;">&amp;amp;</span>amp; 5 <span class="token entity named-entity" title="&amp;">&amp;amp;</span>gt; 4 <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/data&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果在标签文本中，出现大量的特殊字符，不想使用特殊字符，此时可以用CDATA区，格式如下：</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>![SDATA[</span>
        <span class="token attr-name">3</span> <span class="token attr-name">&lt;</span> <span class="token attr-name">2</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">5</span> <span class="token punctuation">&gt;</span></span> 4
    ]]&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码演示：</p><p><img src="`+k+`" alt="1704156329212"></p><p>参考代码：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token comment">&lt;!--上一行代码是文档声明--&gt;</span>

<span class="token comment">&lt;!--需要唯一的根标签，根标签中的其它标签是双标签--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>wangcai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">&gt;</span></span>man<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>bj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span>3 <span class="token entity named-entity" title="&lt;">&amp;lt;</span> 2 <span class="token entity named-entity" title="&amp;">&amp;amp;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span> 5 <span class="token entity named-entity" title="&gt;">&amp;gt;</span> 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data1</span><span class="token punctuation">&gt;</span></span>
            <span class="token cdata">&lt;![CDATA[
                3 &lt; 2 &amp;&amp; 5 &gt; 4
            ]]&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>xiaoqiang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">&gt;</span></span>women<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>sh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器测试之，如下：</p><p><img src="`+r+'" alt="1704156306480"></p><h3 id="_2-xml的作用" tabindex="-1"><a class="header-anchor" href="#_2-xml的作用" aria-hidden="true">#</a> 2，XML的作用</h3><p>xml的作用：</p><ul><li>网络传输中的一种数据格式，现在主流的格式是JSON</li><li>项目的配置文件</li></ul><h3 id="_3-xml解析" tabindex="-1"><a class="header-anchor" href="#_3-xml解析" aria-hidden="true">#</a> 3，XML解析</h3><p>实用程序读取XML文件中的数据，称之为XML解析。这里并不需要我们自己写IO流代码去读取xml文件中的数据。其实有很多开源好用的XML解析框架，最知名的是DOM4J(第三方开发的)</p><p>DMO4J解析XML文件的思想是：文档对象模型(意思是把整个XML文档、每一个标签、每一个属性都当作对象来看待)。Document对象表示真XML文档、Element对象表示标签(元素)、Attribute对象表示属性、标签中的内容就是文本。</p><p>DOM4J解析XML需要用到的方法如下：</p><ul><li>public SAXReader() 构建DMO4J的解析对象，可以认为代表整个DMO4J框架</li><li>public Document read(String url) 把XML文件读成Document对象</li><li>public Document read(InputSteam is) 通过字节输入流读取XML文件</li><li>Element getElement 获取根元素对象</li></ul><p>XML解析过程，是从根元素开始，从外层往里曾解析。需要先把Document对象和根元素获取出来，代码演示：</p><h3 id="_4-xml文件写入" tabindex="-1"><a class="header-anchor" href="#_4-xml文件写入" aria-hidden="true">#</a> 4，XML文件写入</h3><h3 id="_5-xml约束" tabindex="-1"><a class="header-anchor" href="#_5-xml约束" aria-hidden="true">#</a> 5，XML约束</h3><h2 id="三-日志技术" tabindex="-1"><a class="header-anchor" href="#三-日志技术" aria-hidden="true">#</a> 三，日志技术</h2><h3 id="_1-日志概述" tabindex="-1"><a class="header-anchor" href="#_1-日志概述" aria-hidden="true">#</a> 1，日志概述</h3><h3 id="_2-日志体系" tabindex="-1"><a class="header-anchor" href="#_2-日志体系" aria-hidden="true">#</a> 2，日志体系</h3><h3 id="_3-logback快速入门" tabindex="-1"><a class="header-anchor" href="#_3-logback快速入门" aria-hidden="true">#</a> 3，Logback快速入门</h3><h3 id="_4-日志配置文件" tabindex="-1"><a class="header-anchor" href="#_4-日志配置文件" aria-hidden="true">#</a> 4，日志配置文件</h3><h3 id="_5-配置日志级别" tabindex="-1"><a class="header-anchor" href="#_5-配置日志级别" aria-hidden="true">#</a> 5，配置日志级别</h3>',77),v=[m];function g(b,h){return s(),a("div",null,v)}const x=n(d,[["render",g],["__file","12-teshuwenjianyurizhijishu.html.vue"]]);export{x as default};
