import{_ as n,o as s,c as a,a as t}from"./app-f457d6bf.js";const p="/wcblog/assets/1701259044301-4cb97578.png",o="/wcblog/assets/1695781971796.4ce9f411-cc139771.png",e="/wcblog/assets/1695782071338.d6443604-a853112e.png",c="/wcblog/assets/1695783263407.08f94354-4a8cb57a.png",l="/wcblog/assets/1695785766858.08ef87a4-09b7974c.png",i="/wcblog/assets/1695786003900.9dfbeac1-4df4646b.png",u="/wcblog/assets/1695786276825.dc0a89e6-217e6d14.png",k="/wcblog/assets/1695786370262.64a400bd-3d044c5c.png",r="/wcblog/assets/1695786502112.f85c21c4-de9f3587.png",d="/wcblog/assets/1695786574977.c9edc002-6c91f035.png",m="/wcblog/assets/1695786675603.6da6c9a7-0ba33c1f.png",v="/wcblog/assets/1695797927464.fe977feb-518cd949.png",b="/wcblog/assets/1695798075996.b8da1caa-ef3f05b8.png",g="/wcblog/assets/1695798350799.10edd150-203c5a8c.png",h="/wcblog/assets/1695798449139.e1a92068-b65254ed.png",f="/wcblog/assets/1695798540535.c43fbeef-f4ba4411.png",_="/wcblog/assets/1695798698767.7bca4d0a-4015d804.png",w="/wcblog/assets/1695798780444.1c6bb175-434d50da.png",y="/wcblog/assets/1695798994099.e8346b23-c965950e.png",q="/wcblog/assets/1695799091894.5aca0f26-6ead3c56.png",x="/wcblog/assets/1695799149042.bbb25c45-7878214c.png",j="/wcblog/assets/1695799269365.465cd39b-2d81e04e.png",P="/wcblog/assets/1695799372027.e8a974a6-c434de31.png",S="/wcblog/assets/1695799722951.f6872823-9b646353.png",T="/wcblog/assets/1695799890765.e87ebf36-98401859.png",J="/wcblog/assets/1695800000059.e0f0e078-b8fbeccb.png",D="/wcblog/assets/1695800051574.82ff743a-1380461d.png",O="/wcblog/assets/1695800122783.1e45b9fa-8df96724.png",E="/wcblog/assets/1695800188027.1298e172-533b0f52.png",B="/wcblog/assets/1695800476729.0c53ec13-ed718898.png",I="/wcblog/assets/1695800800425.ebd5672e-b848c45e.png",M="/wcblog/assets/1695800927717.4a96a759-cd5464cc.png",N="/wcblog/assets/1695863807613.c2bc2b3a-17f06735.png",U="/wcblog/assets/1695865495907.07f273b8-6476f248.png",C="/wcblog/assets/1695865805439.cb3f8b9c-19e98a3d.png",V="/wcblog/assets/1695868311178.14debdbb-854db593.png",Y="/wcblog/assets/1695868673517.7d47b8b5-9b17f1e2.png",z="/wcblog/assets/1701267188415-afe6ede7.png",A="/wcblog/assets/1701267599083-015820d5.png",F="/wcblog/assets/1701268147099-43098be9.png",G="/wcblog/assets/1695881929569.30a08f06-32da4566.png",H="/wcblog/assets/1695882164329.59d02a51-ea6f9cdf.png",K="/wcblog/assets/1695882642695.c0edf9b5-063b9a18.png",L="/wcblog/assets/1695882898106.17743e9f-154b6929.png",Q={},R=t('<h1 id="异步方案" tabindex="-1"><a class="header-anchor" href="#异步方案" aria-hidden="true">#</a> 异步方案</h1><h2 id="一-最早解决异步" tabindex="-1"><a class="header-anchor" href="#一-最早解决异步" aria-hidden="true">#</a> 一，最早解决异步</h2><h3 id="_1-代码分类" tabindex="-1"><a class="header-anchor" href="#_1-代码分类" aria-hidden="true">#</a> 1，代码分类</h3><ul><li><p>JS中的代码分两类</p><ul><li><p>同步代码</p><p>我们写的绝大代码都是从上到下执行的，也就是说代码的书写顺序和代码的执行顺序是一样的，这样的代码是同步代码，也就说，你看到的98%的代码都是同步代码。</p></li><li><p>异步代码</p><p>还有一部分代码，是异步代码，异步代码的书写顺序和同步代码的执行顺序不一样，这样的代码很少，如前面学的--定时器(定时器中的回调函数)，就是异步代码。</p></li></ul></li></ul><p>分析如下代码：</p><p><img src="'+p+'" alt="1701259044301"></p><p>计算从0到某个数的和，三秒后输出结果，结果可能是正确的，也可能是不正确，如下：</p><p><img src="'+o+'" alt="1695781971796"></p><p>如果异步任务嵌套了多层，会导致回调地狱，如下：</p><p><img src="'+e+`" alt="1695782071338"></p><p>回调地狱的代码，功能是没有问题的，但是代码不优雅。如何更加优雅解决异步问题，就需要学习今天的promise。promise知识也是原生的JS的知识点。说白了，学习的还是原生JS。</p><h2 id="二-promise" tabindex="-1"><a class="header-anchor" href="#二-promise" aria-hidden="true">#</a> 二，Promise</h2><h3 id="_1-promise介绍" tabindex="-1"><a class="header-anchor" href="#_1-promise介绍" aria-hidden="true">#</a> 1，Promise介绍</h3><p><strong>Promise是ES6中的一个类，翻译是承诺，许诺的意思。</strong></p><ul><li>new Promise就可以得到一个对象。在new Promise时，需要传入一个回调函数，这个回调函数是立即执行，叫执行器，这个执行器中有两个参数，分别是：resolve 和 reject。在执行器中，可以写异步代码，代码如下：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 函数也是数据</span>
    <span class="token comment">// p叫promise对象</span>
    <span class="token comment">// new Promise时，写的那个函数，叫执行器，执行器会立即执行</span>
    <span class="token comment">// Promise有三个状态  当new出来时，是处于等状态</span>
    <span class="token comment">// 调用resolve可以把等待状态的promise变成成功态</span>
    <span class="token comment">// 调用reject可以把等待状态的promise变成失败态</span>
    <span class="token comment">// 一个promise只能从等待到成功或从等待到失败</span>
    <span class="token comment">// 一但成功了，就不能失败了</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是执行器，我立即执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在执行器中通常写异步代码，我们说的异步指的是定时器中的回调函数</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是定时器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 在异步代码中，可以调用resovle或reject</span>
            <span class="token comment">// resolve,reject是一个函数</span>
            <span class="token comment">// resolve中的值，就是成功的值，也就是终值  value</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;包包&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 就是把等待的promise变成成功的promise</span>

            <span class="token comment">// reject中的值，就是失败的值，也就是失败的原因  reason</span>
            <span class="token comment">// reject(&quot;没钱&quot;); // 就是把等待的promise变成失败的promise</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pending 是等待的意思</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rejected 表示失败态   fulfilled表示成功状态</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Promise有三种状态:</strong></p><ul><li>等待状态：pending 。默认创建出来的promise是处于等待状态</li><li>成功状态：fulfulled。 当调用resolve时，就可以把promise从等待变成成功</li><li>失败状态：rejected 。当调用reject时，就可以把promise从等待变成失败</li></ul><p>改造一下上面的写的案例，如下：</p><p><img src="`+c+`" alt="1695783263407"></p><h3 id="_2-resolve的实参问题" tabindex="-1"><a class="header-anchor" href="#_2-resolve的实参问题" aria-hidden="true">#</a> 2，resolve的实参问题</h3><p><strong>调用resolve，pormise不一定都是成功的promise，分三种情况：</strong></p><ul><li>传递一个普通的数据，</li><li>传递一个p(promise)，最终的promise是成功还是失败取决于p。</li><li>传递一个thenable，最终的promise是成功还是失败取决于thenable。</li></ul><p>代码演示：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 方式一:加定时器</span>
  <span class="token comment">// const p = new Promise((resolve, reject) =&gt; {</span>
  <span class="token comment">//   setTimeout(() =&gt; {</span>
  <span class="token comment">//     // resolve(&quot;P的resolve&quot;);</span>
  <span class="token comment">//     reject(&quot;没钱&quot;);</span>
  <span class="token comment">//   }, 2000)</span>
  <span class="token comment">// });</span>

  <span class="token comment">// 方式二:then方法</span>
  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1) 参数时普通的数据</span>
    <span class="token comment">// resolve(&#39;包包&#39;);</span>
    <span class="token comment">// resolve(111);</span>
    <span class="token comment">// resolve([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]);</span>
    <span class="token comment">// resolve({name: &#39;ml&#39;});</span>


    <span class="token comment">// 2)参数是promise</span>
    <span class="token comment">// 如果resolve的参数是promise,最终结果由p决定</span>
    <span class="token comment">// resole(p);</span>

    <span class="token comment">// 3)参数是thenable(就是一个对象中有一个then函数)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// resolve(&quot;包包&quot;);</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;没钱&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;value:&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;err:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-then方法" tabindex="-1"><a class="header-anchor" href="#_3-then方法" aria-hidden="true">#</a> 3，then方法</h3><p><strong>一个promise对象，都有一个then方法，只要是一个promise，都有一个then方法。</strong></p><p>代码演示：</p><p><img src="`+l+'" alt="1695785766858"></p><h3 id="_4-then函数的返回值" tabindex="-1"><a class="header-anchor" href="#_4-then函数的返回值" aria-hidden="true">#</a> 4，then函数的返回值</h3><p><strong>then方法是有返回值的，它返回一个新的promise，只要你敢then，就返回一个新的promise。</strong></p><p>代码演示：</p><p><img src="'+i+'" alt="1695786003900"></p><p>现在我们需要研究新的promsie是成功的还是失败的，新的promise是成功的还是失败的，取决于上一个then做了什么，当上一个then方法中的回调函数在执行时，新promise处于等待状态，当上一个then返回一个结果时，那这个结果就决定了新的promise的状态，情况有下面四种：</p><ul><li>上一个then返回一个普通的值（包含und） 新的promise是成功的promsie</li><li>上一个then返回一个promise</li><li>上一个then返回一个thenable值</li><li>上一个then抛出一个错误</li></ul><p>上一个then返回一个普通的值（包含und） 新的promise是成功的promsie。代码演示：</p><p><img src="'+u+'" alt="1695786276825"></p><p><img src="'+k+'" alt="1695786370262"></p><p>上一个then返回一个promise，代码演示：</p><p><img src="'+r+'" alt="1695786502112"></p><p>上一个then返回一个thenable值，代码演示：</p><p><img src="'+d+'" alt="1695786574977"></p><p>上一个then抛出一个错误，新的promise就是一个失败的promise，如下：</p><p><img src="'+m+'" alt="1695786675603"></p><h3 id="_5-then的顺延" tabindex="-1"><a class="header-anchor" href="#_5-then的顺延" aria-hidden="true">#</a> 5，then的顺延</h3><p><strong>当我们调用then方法时，可以传递两个函数，第一个函数是pormise成功的时候调用，第二个函数是promise失败的时候调用。</strong></p><p>我们要考虑，这两个函数，能不能就传递一个呢？如下：</p><p><img src="'+v+'" alt="1695797927464"></p><p>测试一个失败的promise是否可以顺延，如下：</p><p><img src="'+b+'" alt="1695798075996"></p><p>根据then的顺延，引出catch，如下：</p><p><img src="'+g+'" alt="1695798350799"></p><p>在开发中一般是在then中获取成功的结果，在catch中获取失败的结果，如下：</p><p><img src="'+h+'" alt="1695798449139"></p><h3 id="_6-finally" tabindex="-1"><a class="header-anchor" href="#_6-finally" aria-hidden="true">#</a> 6，finally</h3><p><strong>在ES9中，新增了finally方法，无论promise是成功的，还是失败的，最终都会执行finally。</strong></p><p>代码演示：</p><p><img src="'+f+'" alt="1695798540535"></p><h3 id="_7-promise的静态方法" tabindex="-1"><a class="header-anchor" href="#_7-promise的静态方法" aria-hidden="true">#</a> 7，Promise的静态方法</h3><p><strong>上面学习的then，catch，finally都是promise实例上的方法，其实在Promise这个类上面，还有一些方法，这些方法，叫静态方法。</strong></p><p>代码演示：</p><p><img src="'+_+'" alt="1695798698767"></p><p><img src="'+w+'" alt="1695798780444"></p><p><strong>all方法，all的作用：</strong></p><ul><li>所有promise都成功后，得到所有成功后的promise结果</li><li>如果有一个先失败了，直接得到最先失败promise的结果</li></ul><p>代码演示：</p><p><img src="'+y+'" alt="1695798994099"></p><p><strong>allSettled方法，allSettled的作用：</strong></p><ul><li>获取所有的promise的结果，不管成功还是失败</li></ul><p>代码演示：</p><p><img src="'+q+'" alt="1695799091894"></p><p><img src="'+x+'" alt="1695799149042"></p><p><strong>race方法，race是比赛的意思，race的作用：</strong></p><ul><li>会等到第一个Promise有结果(无论这个结果是fulfilled还是rejected)</li></ul><p>代码演示：</p><p><img src="'+j+'" alt="1695799269365"></p><p><strong>any方法，any的作用：</strong></p><ul><li>返回第1个成功的 或者 返回所有都失败了</li></ul><p>代码演示：</p><p><img src="'+P+'" alt="1695799372027"></p><h2 id="三-async函数" tabindex="-1"><a class="header-anchor" href="#三-async函数" aria-hidden="true">#</a> 三，async函数</h2><h3 id="_1-什么是async函数" tabindex="-1"><a class="header-anchor" href="#_1-什么是async函数" aria-hidden="true">#</a> 1，什么是async函数</h3><p><strong>async是一个关键字，用于声明一个异步函数，async是asynchronous简写，是异步的意思。</strong></p><p>代码演示：</p><p><img src="'+S+'" alt="1695799722951"></p><h3 id="_2-async函数的返回值" tabindex="-1"><a class="header-anchor" href="#_2-async函数的返回值" aria-hidden="true">#</a> 2，async函数的返回值</h3><p><strong>注意：异步函数的结果永远都是promise！！!</strong></p><p>异步函数内部代码的执行过程和普通函数是一样的，默认也是同步执行。异步函数和普通函数的区别，如下：</p><ul><li>异步函数可以有返回值，但是不管返回什么普通值，都会包裹在Pormise.resolve中</li><li>如果异步函数自己返回了promise，得到的Promies状态由这个promise决定</li><li>如果我们异步函数返回值是一个对象并且实现thenable，得到的Promies状态由then方法中做了什么才能决定</li><li>如果在async函数中抛出一个错误，得到的promise是一个失败的promsie</li></ul><p>异步函数可以有返回值，但是不管返回什么普通值，都会包裹在Pormise.resolve中，代码演示：</p><p><img src="'+T+'" alt="1695799890765"></p><p>如果异步函数自己返回了promise，得到的Promies状态由这个promise决定，代码演示：</p><p><img src="'+J+'" alt="1695800000059"></p><p>如果我们异步函数返回值是一个对象并且实现thenable，得到的Promies状态由then方法中做了什么才能决定，代码演示：</p><p><img src="'+D+'" alt="1695800051574"></p><p>如果在async函数中抛出一个错误，得到的promise是一个失败的promsie，代码演示：</p><p><img src="'+O+'" alt="1695800122783"></p><p>async函数返回一个promise，如何得到的成功的结果，如何得到失败的结果，如下：</p><p><img src="'+E+'" alt="1695800188027"></p><h2 id="四-await关键字" tabindex="-1"><a class="header-anchor" href="#四-await关键字" aria-hidden="true">#</a> 四，await关键字</h2><h3 id="_1-await关键字介绍" tabindex="-1"><a class="header-anchor" href="#_1-await关键字介绍" aria-hidden="true">#</a> 1，await关键字介绍</h3><p>async关键字可以单独使用，在异步函数内部可以使用await关键字，但是在普通函数中不能使用await关键字。</p><p><strong>await关键字有什么作用？</strong></p><ul><li>await后面跟一个表达式，这个表达式通常是一个promise</li><li>这个await可以等待它后面的promise成功后，拿到成功的结果，得到之后，才会执行后面的代码。</li></ul><p><strong>await后面可以跟不同的数据：</strong></p><ul><li>如果await后面跟一个普通值，那么会直接返回这个值。</li><li>如果await后面跟一个thenable对象，那么要看你这个thenable中的then做了什么。</li><li>如果await后面的promise是失败的，需要通过try catch来获取失败的结果。</li></ul><p>如果await后面跟一个普通值，那么会直接返回这个值。代码演示：</p><p><img src="'+B+'" alt="1695800476729"></p><p>await后面通常跟promise，代码演示：</p><p><img src="'+I+'" alt="1695800800425"></p><p>如何获取失败的结果呢？如下：</p><p><img src="'+M+'" alt="1695800927717"></p><h3 id="_2-使用async-await-处理异步问题" tabindex="-1"><a class="header-anchor" href="#_2-使用async-await-处理异步问题" aria-hidden="true">#</a> 2，使用async + await 处理异步问题</h3><p><img src="'+N+`" alt="1695863807613"></p><h2 id="五-浏览器事件环" tabindex="-1"><a class="header-anchor" href="#五-浏览器事件环" aria-hidden="true">#</a> 五，浏览器事件环</h2><h3 id="_1-进程与线程" tabindex="-1"><a class="header-anchor" href="#_1-进程与线程" aria-hidden="true">#</a> 1，进程与线程</h3><ul><li><p>进程</p><p>计算机已经运行起来的程序，是操作系统操作程序的一种方式。当一个软件运行起来后，就是一个进程，电脑上可以运行很多软件，在OS上，有很多的进程，进程是OS分配资源（CPU和内存）的基本单位。OS可以当做一个工厂，一个一个的车间就是进程。</p></li><li><p>线程</p><p>操作系统能够运行运算调度的最小单位，一个进程中，至少要包含一个线程，用来执行程序中的代码，这个线程叫主线程，线程才是真正干活的，类似于工厂中的工人。如果一个车间如果只有一个工人，就是单线程，如果一个车间中有N个工人，就是多线程。</p></li><li><p>浏览器是多进程</p><p>浏览器是一个多进程的软件，一个选项卡，就是一个进程，进程之间一般是独立的。在每一个进程中，包含了很多的线程，其中就包括JS代码执行线程。</p></li><li><p>JS主线程是单线程</p><p>执行JS代码的线程就一个，也就是说，同一个时刻，只能做一件事，那么我们就说JS是单线程的。如果遇到了一个非常耗时的任务，线程不会阻塞，此时，JS的主线程不会等待，浏览器会开一些其它线程去执行耗时任务，主线程，会把所有的同步代码都执行完毕，浏览器会开一些其它线程去执行耗时任务，我们说的JS是单线程的，是指主线程是单线程的，浏览器内部还可以开一些其它线程，如定时器线程，如ajax数据请求线程。</p></li></ul><p><strong>异步代码分两类：</strong></p><ul><li>宏任务：ajax，setTimeout，setInterval，DOM事件监听，UI渲染....</li><li>微任务：promies中的then回调 Mutaion Observer ...</li></ul><h3 id="_2-js代码的执行顺序" tabindex="-1"><a class="header-anchor" href="#_2-js代码的执行顺序" aria-hidden="true">#</a> 2，JS代码的执行顺序</h3><ul><li><p>JS代码的执行顺序：</p><ol><li>从代码段开始执行，先所有的同步任务执行完毕。</li><li>如果遇到一个宏任务，会把这个任务放到一个宏任务队列，如果遇到一个微任务，就把这个微任务放到微任务任务中。</li><li>当同步代码执行完毕后，先去清空微任务队列。</li><li>当微任务队列清空完毕后，从宏任务队列中取出一个宏任务，去执行，在执行过程中，你的宏任务中可能还有同步代码或宏任务或微任务，重复上面的步骤，执行完一个宏任务，肯定要清空微任务队列。</li><li>上面的这个循环就构成了浏览器的事件环。</li></ol></li></ul><h3 id="_3-事件环练习题" tabindex="-1"><a class="header-anchor" href="#_3-事件环练习题" aria-hidden="true">#</a> 3，事件环练习题</h3><p>第一个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><p><img src="`+U+`" alt="1695865495907"></p><p>第二个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><p><img src="`+C+`" alt="1695865805439"></p><p>第三个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><p><img src="`+V+`" alt="1695868311178"></p><p>第四个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;22222&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">await</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;33333&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;444444&quot;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><p><img src="`+Y+`" alt="1695868673517"></p><p>第五个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><p><img src="`+z+`" alt="1701267188415"></p><p>第六个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">4</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><p><img src="`+A+`" alt="1701267599083"></p><p>第七个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;哈哈&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> end <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> start1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;呵呵&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> end1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end1 <span class="token operator">-</span> start1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// while(true){}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="`+F+`" alt="1701268147099"></p><h2 id="六-总结异步解决方案" tabindex="-1"><a class="header-anchor" href="#六-总结异步解决方案" aria-hidden="true">#</a> 六，总结异步解决方案</h2><h3 id="_1-回调函数解决异步方案" tabindex="-1"><a class="header-anchor" href="#_1-回调函数解决异步方案" aria-hidden="true">#</a> 1，回调函数解决异步方案</h3><p>异步解决方案需要掌握的知识点：</p><ul><li>promise</li><li>迭代器</li><li>可迭代对象</li><li>生成器</li></ul><p>最早的异步方案，就是回调函数，嵌套过多的话，会导致回调地狱。</p><p>有如下的需求：</p><ol><li>发送一次网络请求, 等到这次网络请求的结果 传学生的编号 得到 学生的姓名</li><li>发送第二次网络请求, 等待这次网络请求的结果 传学生的姓名 得到 学生的成绩</li><li>发送第三次网络请求, 等待这次网络请求的结果 传学生的成绩 得到 成绩的等级</li></ol><p>写代码实现之，如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 一层屋嵌套  不优雅</span>
    <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第一次ajax请求</span>
        <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&quot;001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res1</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;res1是学生的姓名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 第二次ajax请求</span>
            <span class="token function">ajax</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;res2是学生的成绩&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 第三次ajax请求</span>
                <span class="token function">ajax</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res3</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;res3是学生的等级&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器测试之，如下：</p><p><img src="`+G+'" alt="1695881929569"></p><h3 id="_2-使用then链进行优化" tabindex="-1"><a class="header-anchor" href="#_2-使用then链进行优化" aria-hidden="true">#</a> 2，使用then链进行优化</h3><p>上面的代码不优雅，进行优化，如下：</p><p><img src="'+H+'" alt="1695882164329"></p><h3 id="_3-使用生成器函数" tabindex="-1"><a class="header-anchor" href="#_3-使用生成器函数" aria-hidden="true">#</a> 3，使用生成器函数</h3><p><img src="'+K+'" alt="1695882642695"></p><h3 id="_4-终极方案-async-await" tabindex="-1"><a class="header-anchor" href="#_4-终极方案-async-await" aria-hidden="true">#</a> 4，终极方案（async + await）</h3><p><img src="'+L+'" alt="1695882898106"></p>',168),W=[R];function X(Z,$){return s(),a("div",null,W)}const sn=n(Q,[["render",X],["__file","07-yibufangan.html.vue"]]);export{sn as default};
